from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model import Model
from openapi_server.models.field_item import FieldItem
from openapi_server.models.tax_exempt_type import TaxExemptType
from openapi_server.models.tax_line_item import TaxLineItem
from openapi_server import util

from openapi_server.models.field_item import FieldItem  # noqa: E501
from openapi_server.models.tax_exempt_type import TaxExemptType  # noqa: E501
from openapi_server.models.tax_line_item import TaxLineItem  # noqa: E501

class InvoiceLineItem(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, number=None, item_code=None, description=None, quantity=None, unit_price=None, amount=None, subtotal=None, is_tax_inclusive=None, is_taxable=None, tax_identifiers=None, tax_exempt_type=None, tax_exempt_reason=None, exempt_amount=None, discount_amount=None, taxable_amount=None, tax_amount=None, total=None, is_partial_tax=None, taxes=None):  # noqa: E501
        """InvoiceLineItem - a model defined in OpenAPI

        :param number: The number of this InvoiceLineItem.  # noqa: E501
        :type number: int
        :param item_code: The item_code of this InvoiceLineItem.  # noqa: E501
        :type item_code: str
        :param description: The description of this InvoiceLineItem.  # noqa: E501
        :type description: str
        :param quantity: The quantity of this InvoiceLineItem.  # noqa: E501
        :type quantity: float
        :param unit_price: The unit_price of this InvoiceLineItem.  # noqa: E501
        :type unit_price: float
        :param amount: The amount of this InvoiceLineItem.  # noqa: E501
        :type amount: float
        :param subtotal: The subtotal of this InvoiceLineItem.  # noqa: E501
        :type subtotal: float
        :param is_tax_inclusive: The is_tax_inclusive of this InvoiceLineItem.  # noqa: E501
        :type is_tax_inclusive: bool
        :param is_taxable: The is_taxable of this InvoiceLineItem.  # noqa: E501
        :type is_taxable: bool
        :param tax_identifiers: The tax_identifiers of this InvoiceLineItem.  # noqa: E501
        :type tax_identifiers: List[FieldItem]
        :param tax_exempt_type: The tax_exempt_type of this InvoiceLineItem.  # noqa: E501
        :type tax_exempt_type: TaxExemptType
        :param tax_exempt_reason: The tax_exempt_reason of this InvoiceLineItem.  # noqa: E501
        :type tax_exempt_reason: str
        :param exempt_amount: The exempt_amount of this InvoiceLineItem.  # noqa: E501
        :type exempt_amount: float
        :param discount_amount: The discount_amount of this InvoiceLineItem.  # noqa: E501
        :type discount_amount: float
        :param taxable_amount: The taxable_amount of this InvoiceLineItem.  # noqa: E501
        :type taxable_amount: float
        :param tax_amount: The tax_amount of this InvoiceLineItem.  # noqa: E501
        :type tax_amount: float
        :param total: The total of this InvoiceLineItem.  # noqa: E501
        :type total: float
        :param is_partial_tax: The is_partial_tax of this InvoiceLineItem.  # noqa: E501
        :type is_partial_tax: bool
        :param taxes: The taxes of this InvoiceLineItem.  # noqa: E501
        :type taxes: List[TaxLineItem]
        """
        self.openapi_types = {
            'number': int,
            'item_code': str,
            'description': str,
            'quantity': float,
            'unit_price': float,
            'amount': float,
            'subtotal': float,
            'is_tax_inclusive': bool,
            'is_taxable': bool,
            'tax_identifiers': List[FieldItem],
            'tax_exempt_type': TaxExemptType,
            'tax_exempt_reason': str,
            'exempt_amount': float,
            'discount_amount': float,
            'taxable_amount': float,
            'tax_amount': float,
            'total': float,
            'is_partial_tax': bool,
            'taxes': List[TaxLineItem]
        }

        self.attribute_map = {
            'number': 'number',
            'item_code': 'itemCode',
            'description': 'description',
            'quantity': 'quantity',
            'unit_price': 'unitPrice',
            'amount': 'amount',
            'subtotal': 'subtotal',
            'is_tax_inclusive': 'isTaxInclusive',
            'is_taxable': 'isTaxable',
            'tax_identifiers': 'taxIdentifiers',
            'tax_exempt_type': 'taxExemptType',
            'tax_exempt_reason': 'taxExemptReason',
            'exempt_amount': 'exemptAmount',
            'discount_amount': 'discountAmount',
            'taxable_amount': 'taxableAmount',
            'tax_amount': 'taxAmount',
            'total': 'total',
            'is_partial_tax': 'isPartialTax',
            'taxes': 'taxes'
        }

        self._number = number
        self._item_code = item_code
        self._description = description
        self._quantity = quantity
        self._unit_price = unit_price
        self._amount = amount
        self._subtotal = subtotal
        self._is_tax_inclusive = is_tax_inclusive
        self._is_taxable = is_taxable
        self._tax_identifiers = tax_identifiers
        self._tax_exempt_type = tax_exempt_type
        self._tax_exempt_reason = tax_exempt_reason
        self._exempt_amount = exempt_amount
        self._discount_amount = discount_amount
        self._taxable_amount = taxable_amount
        self._tax_amount = tax_amount
        self._total = total
        self._is_partial_tax = is_partial_tax
        self._taxes = taxes

    @classmethod
    def from_dict(cls, dikt) -> 'InvoiceLineItem':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The InvoiceLineItem of this InvoiceLineItem.  # noqa: E501
        :rtype: InvoiceLineItem
        """
        return util.deserialize_model(dikt, cls)

    @property
    def number(self) -> int:
        """Gets the number of this InvoiceLineItem.

        Index or serial number of the line item.  # noqa: E501

        :return: The number of this InvoiceLineItem.
        :rtype: int
        """
        return self._number

    @number.setter
    def number(self, number: int):
        """Sets the number of this InvoiceLineItem.

        Index or serial number of the line item.  # noqa: E501

        :param number: The number of this InvoiceLineItem.
        :type number: int
        """
        if number is None:
            raise ValueError("Invalid value for `number`, must not be `None`")  # noqa: E501
        if number is not None and number < 1:  # noqa: E501
            raise ValueError("Invalid value for `number`, must be a value greater than or equal to `1`")  # noqa: E501

        self._number = number

    @property
    def item_code(self) -> str:
        """Gets the item_code of this InvoiceLineItem.

        The unique identifier (in Chargebee) of the product corresponding to the line item. If the line item corresponds to a one-off charge, then this identifier is not present.  # noqa: E501

        :return: The item_code of this InvoiceLineItem.
        :rtype: str
        """
        return self._item_code

    @item_code.setter
    def item_code(self, item_code: str):
        """Sets the item_code of this InvoiceLineItem.

        The unique identifier (in Chargebee) of the product corresponding to the line item. If the line item corresponds to a one-off charge, then this identifier is not present.  # noqa: E501

        :param item_code: The item_code of this InvoiceLineItem.
        :type item_code: str
        """
        if item_code is not None and len(item_code) > 50:
            raise ValueError("Invalid value for `item_code`, length must be less than or equal to `50`")  # noqa: E501

        self._item_code = item_code

    @property
    def description(self) -> str:
        """Gets the description of this InvoiceLineItem.

        The description of the line item.  # noqa: E501

        :return: The description of this InvoiceLineItem.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description: str):
        """Sets the description of this InvoiceLineItem.

        The description of the line item.  # noqa: E501

        :param description: The description of this InvoiceLineItem.
        :type description: str
        """
        if description is not None and len(description) > 250:
            raise ValueError("Invalid value for `description`, length must be less than or equal to `250`")  # noqa: E501

        self._description = description

    @property
    def quantity(self) -> float:
        """Gets the quantity of this InvoiceLineItem.

        The quantity associated with this line item.  # noqa: E501

        :return: The quantity of this InvoiceLineItem.
        :rtype: float
        """
        return self._quantity

    @quantity.setter
    def quantity(self, quantity: float):
        """Sets the quantity of this InvoiceLineItem.

        The quantity associated with this line item.  # noqa: E501

        :param quantity: The quantity of this InvoiceLineItem.
        :type quantity: float
        """
        if quantity is not None and quantity < 0:  # noqa: E501
            raise ValueError("Invalid value for `quantity`, must be a value greater than or equal to `0`")  # noqa: E501

        self._quantity = quantity

    @property
    def unit_price(self) -> float:
        """Gets the unit_price of this InvoiceLineItem.

        The unit price for this line item. In case of [tiered pricing](https://www.chargebee.com/docs/1.0/plans.html#tiered-pricing) where the unit price varies for each quantity tier, this is the average unit price.  # noqa: E501

        :return: The unit_price of this InvoiceLineItem.
        :rtype: float
        """
        return self._unit_price

    @unit_price.setter
    def unit_price(self, unit_price: float):
        """Sets the unit_price of this InvoiceLineItem.

        The unit price for this line item. In case of [tiered pricing](https://www.chargebee.com/docs/1.0/plans.html#tiered-pricing) where the unit price varies for each quantity tier, this is the average unit price.  # noqa: E501

        :param unit_price: The unit_price of this InvoiceLineItem.
        :type unit_price: float
        """
        if unit_price is not None and unit_price < 0:  # noqa: E501
            raise ValueError("Invalid value for `unit_price`, must be a value greater than or equal to `0`")  # noqa: E501

        self._unit_price = unit_price

    @property
    def amount(self) -> float:
        """Gets the amount of this InvoiceLineItem.

        The amount for this line item. This is `unitPrice` × `quantity`.  # noqa: E501

        :return: The amount of this InvoiceLineItem.
        :rtype: float
        """
        return self._amount

    @amount.setter
    def amount(self, amount: float):
        """Sets the amount of this InvoiceLineItem.

        The amount for this line item. This is `unitPrice` × `quantity`.  # noqa: E501

        :param amount: The amount of this InvoiceLineItem.
        :type amount: float
        """
        if amount is None:
            raise ValueError("Invalid value for `amount`, must not be `None`")  # noqa: E501

        self._amount = amount

    @property
    def subtotal(self) -> float:
        """Gets the subtotal of this InvoiceLineItem.

        The amount after discounts for this line item. This is `amount` - `discountAmount`.  # noqa: E501

        :return: The subtotal of this InvoiceLineItem.
        :rtype: float
        """
        return self._subtotal

    @subtotal.setter
    def subtotal(self, subtotal: float):
        """Sets the subtotal of this InvoiceLineItem.

        The amount after discounts for this line item. This is `amount` - `discountAmount`.  # noqa: E501

        :param subtotal: The subtotal of this InvoiceLineItem.
        :type subtotal: float
        """
        if subtotal is None:
            raise ValueError("Invalid value for `subtotal`, must not be `None`")  # noqa: E501

        self._subtotal = subtotal

    @property
    def is_tax_inclusive(self) -> bool:
        """Gets the is_tax_inclusive of this InvoiceLineItem.

        Indicates whether the `subtotal` for this line item is inclusive of taxes.  # noqa: E501

        :return: The is_tax_inclusive of this InvoiceLineItem.
        :rtype: bool
        """
        return self._is_tax_inclusive

    @is_tax_inclusive.setter
    def is_tax_inclusive(self, is_tax_inclusive: bool):
        """Sets the is_tax_inclusive of this InvoiceLineItem.

        Indicates whether the `subtotal` for this line item is inclusive of taxes.  # noqa: E501

        :param is_tax_inclusive: The is_tax_inclusive of this InvoiceLineItem.
        :type is_tax_inclusive: bool
        """
        if is_tax_inclusive is None:
            raise ValueError("Invalid value for `is_tax_inclusive`, must not be `None`")  # noqa: E501

        self._is_tax_inclusive = is_tax_inclusive

    @property
    def is_taxable(self) -> bool:
        """Gets the is_taxable of this InvoiceLineItem.

        Indicates whether this line item is taxable.  # noqa: E501

        :return: The is_taxable of this InvoiceLineItem.
        :rtype: bool
        """
        return self._is_taxable

    @is_taxable.setter
    def is_taxable(self, is_taxable: bool):
        """Sets the is_taxable of this InvoiceLineItem.

        Indicates whether this line item is taxable.  # noqa: E501

        :param is_taxable: The is_taxable of this InvoiceLineItem.
        :type is_taxable: bool
        """
        if is_taxable is None:
            raise ValueError("Invalid value for `is_taxable`, must not be `None`")  # noqa: E501

        self._is_taxable = is_taxable

    @property
    def tax_identifiers(self) -> List[FieldItem]:
        """Gets the tax_identifiers of this InvoiceLineItem.

        The tax code fields of the product used for tax calculation.  # noqa: E501

        :return: The tax_identifiers of this InvoiceLineItem.
        :rtype: List[FieldItem]
        """
        return self._tax_identifiers

    @tax_identifiers.setter
    def tax_identifiers(self, tax_identifiers: List[FieldItem]):
        """Sets the tax_identifiers of this InvoiceLineItem.

        The tax code fields of the product used for tax calculation.  # noqa: E501

        :param tax_identifiers: The tax_identifiers of this InvoiceLineItem.
        :type tax_identifiers: List[FieldItem]
        """
        if tax_identifiers is not None and len(tax_identifiers) > 10:
            raise ValueError("Invalid value for `tax_identifiers`, number of items must be less than or equal to `10`")  # noqa: E501

        self._tax_identifiers = tax_identifiers

    @property
    def tax_exempt_type(self) -> TaxExemptType:
        """Gets the tax_exempt_type of this InvoiceLineItem.


        :return: The tax_exempt_type of this InvoiceLineItem.
        :rtype: TaxExemptType
        """
        return self._tax_exempt_type

    @tax_exempt_type.setter
    def tax_exempt_type(self, tax_exempt_type: TaxExemptType):
        """Sets the tax_exempt_type of this InvoiceLineItem.


        :param tax_exempt_type: The tax_exempt_type of this InvoiceLineItem.
        :type tax_exempt_type: TaxExemptType
        """

        self._tax_exempt_type = tax_exempt_type

    @property
    def tax_exempt_reason(self) -> str:
        """Gets the tax_exempt_reason of this InvoiceLineItem.

        The reason due to which a line item is exempted from tax. This is a mandatory parameter while applying tax exemption on any line-item.  # noqa: E501

        :return: The tax_exempt_reason of this InvoiceLineItem.
        :rtype: str
        """
        return self._tax_exempt_reason

    @tax_exempt_reason.setter
    def tax_exempt_reason(self, tax_exempt_reason: str):
        """Sets the tax_exempt_reason of this InvoiceLineItem.

        The reason due to which a line item is exempted from tax. This is a mandatory parameter while applying tax exemption on any line-item.  # noqa: E501

        :param tax_exempt_reason: The tax_exempt_reason of this InvoiceLineItem.
        :type tax_exempt_reason: str
        """
        if tax_exempt_reason is not None and len(tax_exempt_reason) > 250:
            raise ValueError("Invalid value for `tax_exempt_reason`, length must be less than or equal to `250`")  # noqa: E501

        self._tax_exempt_reason = tax_exempt_reason

    @property
    def exempt_amount(self) -> float:
        """Gets the exempt_amount of this InvoiceLineItem.

        The part of this line item's `subtotal` that is exempted from tax.  # noqa: E501

        :return: The exempt_amount of this InvoiceLineItem.
        :rtype: float
        """
        return self._exempt_amount

    @exempt_amount.setter
    def exempt_amount(self, exempt_amount: float):
        """Sets the exempt_amount of this InvoiceLineItem.

        The part of this line item's `subtotal` that is exempted from tax.  # noqa: E501

        :param exempt_amount: The exempt_amount of this InvoiceLineItem.
        :type exempt_amount: float
        """
        if exempt_amount is None:
            raise ValueError("Invalid value for `exempt_amount`, must not be `None`")  # noqa: E501

        self._exempt_amount = exempt_amount

    @property
    def discount_amount(self) -> float:
        """Gets the discount_amount of this InvoiceLineItem.

        The discount applied to this line item.  # noqa: E501

        :return: The discount_amount of this InvoiceLineItem.
        :rtype: float
        """
        return self._discount_amount

    @discount_amount.setter
    def discount_amount(self, discount_amount: float):
        """Sets the discount_amount of this InvoiceLineItem.

        The discount applied to this line item.  # noqa: E501

        :param discount_amount: The discount_amount of this InvoiceLineItem.
        :type discount_amount: float
        """
        if discount_amount is None:
            raise ValueError("Invalid value for `discount_amount`, must not be `None`")  # noqa: E501

        self._discount_amount = discount_amount

    @property
    def taxable_amount(self) -> float:
        """Gets the taxable_amount of this InvoiceLineItem.

        The part of this line item's `subtotal` that is taxable.  # noqa: E501

        :return: The taxable_amount of this InvoiceLineItem.
        :rtype: float
        """
        return self._taxable_amount

    @taxable_amount.setter
    def taxable_amount(self, taxable_amount: float):
        """Sets the taxable_amount of this InvoiceLineItem.

        The part of this line item's `subtotal` that is taxable.  # noqa: E501

        :param taxable_amount: The taxable_amount of this InvoiceLineItem.
        :type taxable_amount: float
        """
        if taxable_amount is None:
            raise ValueError("Invalid value for `taxable_amount`, must not be `None`")  # noqa: E501

        self._taxable_amount = taxable_amount

    @property
    def tax_amount(self) -> float:
        """Gets the tax_amount of this InvoiceLineItem.

        The tax payable for this line item. This is the sum of all `taxes.taxAmount` for this line item.  # noqa: E501

        :return: The tax_amount of this InvoiceLineItem.
        :rtype: float
        """
        return self._tax_amount

    @tax_amount.setter
    def tax_amount(self, tax_amount: float):
        """Sets the tax_amount of this InvoiceLineItem.

        The tax payable for this line item. This is the sum of all `taxes.taxAmount` for this line item.  # noqa: E501

        :param tax_amount: The tax_amount of this InvoiceLineItem.
        :type tax_amount: float
        """
        if tax_amount is None:
            raise ValueError("Invalid value for `tax_amount`, must not be `None`")  # noqa: E501

        self._tax_amount = tax_amount

    @property
    def total(self) -> float:
        """Gets the total of this InvoiceLineItem.

        The total for this line item after discounts and taxes. This is the same as `subtotal` if it is tax inclusive; otherwise it is `subtotal` + `taxAmount`. `total` can also be expressed as `exemptAmount` + `taxableAmount` + `taxAmount`.  # noqa: E501

        :return: The total of this InvoiceLineItem.
        :rtype: float
        """
        return self._total

    @total.setter
    def total(self, total: float):
        """Sets the total of this InvoiceLineItem.

        The total for this line item after discounts and taxes. This is the same as `subtotal` if it is tax inclusive; otherwise it is `subtotal` + `taxAmount`. `total` can also be expressed as `exemptAmount` + `taxableAmount` + `taxAmount`.  # noqa: E501

        :param total: The total of this InvoiceLineItem.
        :type total: float
        """
        if total is None:
            raise ValueError("Invalid value for `total`, must not be `None`")  # noqa: E501

        self._total = total

    @property
    def is_partial_tax(self) -> bool:
        """Gets the is_partial_tax of this InvoiceLineItem.

        Indicates if taxes were applied only partially for this line item.  # noqa: E501

        :return: The is_partial_tax of this InvoiceLineItem.
        :rtype: bool
        """
        return self._is_partial_tax

    @is_partial_tax.setter
    def is_partial_tax(self, is_partial_tax: bool):
        """Sets the is_partial_tax of this InvoiceLineItem.

        Indicates if taxes were applied only partially for this line item.  # noqa: E501

        :param is_partial_tax: The is_partial_tax of this InvoiceLineItem.
        :type is_partial_tax: bool
        """

        self._is_partial_tax = is_partial_tax

    @property
    def taxes(self) -> List[TaxLineItem]:
        """Gets the taxes of this InvoiceLineItem.

        List of taxes applied for this line item under each jurisdiction.  # noqa: E501

        :return: The taxes of this InvoiceLineItem.
        :rtype: List[TaxLineItem]
        """
        return self._taxes

    @taxes.setter
    def taxes(self, taxes: List[TaxLineItem]):
        """Sets the taxes of this InvoiceLineItem.

        List of taxes applied for this line item under each jurisdiction.  # noqa: E501

        :param taxes: The taxes of this InvoiceLineItem.
        :type taxes: List[TaxLineItem]
        """
        if taxes is None:
            raise ValueError("Invalid value for `taxes`, must not be `None`")  # noqa: E501
        if taxes is not None and len(taxes) > 10:
            raise ValueError("Invalid value for `taxes`, number of items must be less than or equal to `10`")  # noqa: E501
        if taxes is not None and len(taxes) < 0:
            raise ValueError("Invalid value for `taxes`, number of items must be greater than or equal to `0`")  # noqa: E501

        self._taxes = taxes
