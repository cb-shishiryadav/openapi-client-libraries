/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (7.8.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package org.openapitools.api;

import org.openapitools.model.AddressValidationRequest;
import org.openapitools.model.AddressValidationResponse;
import org.openapitools.model.BasicErrorResponse;
import org.openapitools.model.CheckAddressTaxabilityRequest;
import org.openapitools.model.CheckAddressTaxabilityResponse;
import org.openapitools.model.HealthCheckResponse;
import org.openapitools.model.ValidationErrorResponse;
import io.swagger.v3.oas.annotations.ExternalDocumentation;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.Parameters;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import io.swagger.v3.oas.annotations.tags.Tag;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import javax.annotation.Generated;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2024-09-25T11:04:41.168990+05:30[Asia/Kolkata]", comments = "Generator version: 7.8.0")
@Validated
@Tag(name = "Address", description = "Endpoints to validate an address and check its taxability.")
public interface AddressApi {

    default Optional<NativeWebRequest> getRequest() {
        return Optional.empty();
    }

    /**
     * POST /address/check-taxability : Check taxability
     * Checks whether the tax address is valid in terms of tax calculation. This endpoint checks whether the address information of the customer is sufficient for the tax provider to return a tax rate. It does not consider the nexus status of the merchant and is mandatory to integrate for the tax provider.
     *
     * @param checkAddressTaxabilityRequest  (optional)
     * @return Tax can be calculated for the address provided. (status code 200)
     *         or Bad request. (status code 400)
     *         or Unauthenticated request. (status code 401)
     *         or Unauthorized request. (status code 403)
     *         or Too many requests. (status code 429)
     *         or Unexpected error while processing request. (status code 500)
     *         or Service is unhealthy. (status code 503)
     */
    @Operation(
        operationId = "checkAddressTaxability",
        summary = "Check taxability",
        description = "Checks whether the tax address is valid in terms of tax calculation. This endpoint checks whether the address information of the customer is sufficient for the tax provider to return a tax rate. It does not consider the nexus status of the merchant and is mandatory to integrate for the tax provider.",
        tags = { "Address" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Tax can be calculated for the address provided.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = CheckAddressTaxabilityResponse.class))
            }),
            @ApiResponse(responseCode = "400", description = "Bad request.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ValidationErrorResponse.class))
            }),
            @ApiResponse(responseCode = "401", description = "Unauthenticated request."),
            @ApiResponse(responseCode = "403", description = "Unauthorized request."),
            @ApiResponse(responseCode = "429", description = "Too many requests."),
            @ApiResponse(responseCode = "500", description = "Unexpected error while processing request.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = BasicErrorResponse.class))
            }),
            @ApiResponse(responseCode = "503", description = "Service is unhealthy.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = HealthCheckResponse.class))
            })
        },
        security = {
            @SecurityRequirement(name = "apiKey"),
            @SecurityRequirement(name = "bearerAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/address/check-taxability",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    default ResponseEntity<CheckAddressTaxabilityResponse> checkAddressTaxability(
        @Parameter(name = "CheckAddressTaxabilityRequest", description = "") @Valid @RequestBody(required = false) CheckAddressTaxabilityRequest checkAddressTaxabilityRequest
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"isTaxable\" : true }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"errors\" : [ { \"code\" : \"INVALID_OPERATION\", \"entityField\" : \"lineItems[0].taxIdentifiers[0].value\", \"helpUrl\" : \"https://apidocs.chargebee.com#Authentication\", \"message\" : \"Invalid tax code provided.\", \"entity\" : \"customer\" }, { \"code\" : \"INVALID_OPERATION\", \"entityField\" : \"lineItems[0].taxIdentifiers[0].value\", \"helpUrl\" : \"https://apidocs.chargebee.com#Authentication\", \"message\" : \"Invalid tax code provided.\", \"entity\" : \"customer\" } ] }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"helpUrl\" : \"https://apidocs.chargebee.com#Authentication\", \"message\" : \"Invalid Credentials\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"components\" : [ { \"endpoints\" : [ \"endpoints\", \"endpoints\" ], \"name\" : \"name\", \"description\" : \"description\", \"id\" : \"id\", \"type\" : \"OTHER\" }, { \"endpoints\" : [ \"endpoints\", \"endpoints\" ], \"name\" : \"name\", \"description\" : \"description\", \"id\" : \"id\", \"type\" : \"OTHER\" } ], \"description\" : \"description\", \"time\" : \"2000-01-23T04:56:07.000+00:00\", \"version\" : \"version\", \"status\" : \"UP\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /address/validate : Address validation
     * Checks whether a given address is a valid delivery address for shipping purposes. The tax provider can decide whether to mention the full or valid address depending on their requirement.
     *
     * @param addressValidationRequest  (optional)
     * @return Address is validated successfully (status code 200)
     *         or Bad request. (status code 400)
     *         or Unauthenticated request. (status code 401)
     *         or Unauthorized request. (status code 403)
     *         or Too many requests. (status code 429)
     *         or Unexpected error while processing request. (status code 500)
     *         or Service is unhealthy. (status code 503)
     */
    @Operation(
        operationId = "validateAddress",
        summary = "Address validation",
        description = "Checks whether a given address is a valid delivery address for shipping purposes. The tax provider can decide whether to mention the full or valid address depending on their requirement.",
        tags = { "Address" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Address is validated successfully", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = AddressValidationResponse.class))
            }),
            @ApiResponse(responseCode = "400", description = "Bad request.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ValidationErrorResponse.class))
            }),
            @ApiResponse(responseCode = "401", description = "Unauthenticated request."),
            @ApiResponse(responseCode = "403", description = "Unauthorized request."),
            @ApiResponse(responseCode = "429", description = "Too many requests."),
            @ApiResponse(responseCode = "500", description = "Unexpected error while processing request.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = BasicErrorResponse.class))
            }),
            @ApiResponse(responseCode = "503", description = "Service is unhealthy.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = HealthCheckResponse.class))
            })
        },
        security = {
            @SecurityRequirement(name = "apiKey"),
            @SecurityRequirement(name = "bearerAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/address/validate",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    default ResponseEntity<AddressValidationResponse> validateAddress(
        @Parameter(name = "AddressValidationRequest", description = "") @Valid @RequestBody(required = false) AddressValidationRequest addressValidationRequest
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"status\" : \"VALID\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"errors\" : [ { \"code\" : \"INVALID_OPERATION\", \"entityField\" : \"lineItems[0].taxIdentifiers[0].value\", \"helpUrl\" : \"https://apidocs.chargebee.com#Authentication\", \"message\" : \"Invalid tax code provided.\", \"entity\" : \"customer\" }, { \"code\" : \"INVALID_OPERATION\", \"entityField\" : \"lineItems[0].taxIdentifiers[0].value\", \"helpUrl\" : \"https://apidocs.chargebee.com#Authentication\", \"message\" : \"Invalid tax code provided.\", \"entity\" : \"customer\" } ] }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"helpUrl\" : \"https://apidocs.chargebee.com#Authentication\", \"message\" : \"Invalid Credentials\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"components\" : [ { \"endpoints\" : [ \"endpoints\", \"endpoints\" ], \"name\" : \"name\", \"description\" : \"description\", \"id\" : \"id\", \"type\" : \"OTHER\" }, { \"endpoints\" : [ \"endpoints\", \"endpoints\" ], \"name\" : \"name\", \"description\" : \"description\", \"id\" : \"id\", \"type\" : \"OTHER\" } ], \"description\" : \"description\", \"time\" : \"2000-01-23T04:56:07.000+00:00\", \"version\" : \"version\", \"status\" : \"UP\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }

}
