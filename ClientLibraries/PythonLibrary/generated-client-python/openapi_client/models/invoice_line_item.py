# coding: utf-8

"""
    Taxes Service Adapter SPI

    ## Overview Tax Service Adapter is a Service Provider Interface (SPI) that helps Chargebee communicate with API platforms providing the following services: - Address validation - Estimating taxes for sales - Submitting invoices for tax filing  If you have an API that provides the services mentioned above and want Chargebee to be able to integrate with it, you can build an adapter service according to this specification.  ## Terminology Here's a list of terms we've used to describe this specification. ### Merchant    Chargebee’s customer who is carrying out the business of selling products. Also known as the Seller. The Seller has one or more Chargebee accounts. ### Chargebee   The SaaS which manages subscriptions and revenue operations on behalf of the Merchant. Chargebee makes API calls to the Tax Service Adapter for tax estimation and tax filing of transactions between the Merchant and the Customer. ### Customer  Merchant’s customer who purchases products from the Merchant. Their customer record(s) and other details are stored within Chargebee under the Merchant’s account. ### Tax Authority The institution, usually a government, that is responsible for collecting taxes for commercial transactions between Merchants and their Customers.   ### Tax Service Provider The service which provides tax estimation and tax filing services for merchants. ### Tax Service Adapter  The SPI for which the spec is defined in this document. This adapter serves the following purposes: - Translates API requests (as defined in this document) from Chargebee to the request format specified by the Tax Service Provider's API. - Translates API responses from the Tax Service Provider APIs to the format understood by Chargebee (as defined in this document). ### Authorization Chargebee uses HTTP header-based authorization for all the API endpoints associated with Tax Service Adapter. We dynamically pass this authorization key in the HTTP header. The parameter that holds this key is found in the JSON object `api_configuration` required for configuring your onboarding on Chargebee's marketplace. In the `api_configuration` object, our [Taxes Service Adapter SPI](https://chargebee.atlassian.net/l/cp/ca5aZ1mA) checks the authorization key parameter from `credential_configuration.id` and creates the HTTP header-based input query parameter for authorization. The `credential_configuration` is an array of objects with an `id` attribute, and the value of `id` is the parameter containing the authorization key.    Following are the JSON snippets for your reference.     ```json       \"api_configuration\": {           \"api_base_url\": \"https://xyz.abc.com/chargebee\",           \"credential_configuration\": [              {               \"id\":\"authorization_key\",               \"name\": \"Authorization Key\",                \"type\": \"text\",               \"is_sensitive\": true              },             {               \"id\": \"client_secret\",               \"name\": \"Client Secret\",               \"type\": \"text\",               \"is_sensitive\": true             }           ]         }    ```     `\"Authorization\":\"{\"<authorization_key>\":\"test_GykCvTykZFTBqHQAFzjMN9R1Thgdho0Q\"}\"` 

    The version of the OpenAPI document: 0.3.7
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictFloat, StrictInt
from typing import Any, ClassVar, Dict, List, Optional, Union
from typing_extensions import Annotated
from openapi_client.models.field_item import FieldItem
from openapi_client.models.tax_exempt_type import TaxExemptType
from openapi_client.models.tax_line_item import TaxLineItem
from typing import Optional, Set
from typing_extensions import Self

class InvoiceLineItem(BaseModel):
    """
    The details of a line item.
    """ # noqa: E501
    number: Annotated[int, Field(strict=True, ge=1)] = Field(description="Index or serial number of the line item.")
    item_code: Optional[Annotated[str, Field(strict=True, max_length=50)]] = Field(default=None, description="The unique identifier (in Chargebee) of the product corresponding to the line item. If the line item corresponds to a one-off charge, then this identifier is not present.", alias="itemCode")
    description: Optional[Annotated[str, Field(strict=True, max_length=250)]] = Field(default=None, description="The description of the line item.")
    quantity: Optional[Union[Annotated[float, Field(strict=True, ge=0)], Annotated[int, Field(strict=True, ge=0)]]] = Field(default=None, description="The quantity associated with this line item.")
    unit_price: Optional[Union[Annotated[float, Field(strict=True, ge=0)], Annotated[int, Field(strict=True, ge=0)]]] = Field(default=None, description="The unit price for this line item. In case of [tiered pricing](https://www.chargebee.com/docs/1.0/plans.html#tiered-pricing) where the unit price varies for each quantity tier, this is the average unit price.", alias="unitPrice")
    amount: Union[StrictFloat, StrictInt] = Field(description="The amount for this line item. This is `unitPrice` × `quantity`.")
    subtotal: Union[StrictFloat, StrictInt] = Field(description="The amount after discounts for this line item. This is `amount` - `discountAmount`.")
    is_tax_inclusive: StrictBool = Field(description="Indicates whether the `subtotal` for this line item is inclusive of taxes.", alias="isTaxInclusive")
    is_taxable: StrictBool = Field(description="Indicates whether this line item is taxable.", alias="isTaxable")
    tax_identifiers: Optional[Annotated[List[FieldItem], Field(max_length=10)]] = Field(default=None, description="The tax code fields of the product used for tax calculation.", alias="taxIdentifiers")
    tax_exempt_type: Optional[TaxExemptType] = Field(default=None, alias="taxExemptType")
    tax_exempt_reason: Optional[Annotated[str, Field(strict=True, max_length=250)]] = Field(default=None, description="The reason due to which a line item is exempted from tax. This is a mandatory parameter while applying tax exemption on any line-item.", alias="taxExemptReason")
    exempt_amount: Union[StrictFloat, StrictInt] = Field(description="The part of this line item's `subtotal` that is exempted from tax.", alias="exemptAmount")
    discount_amount: Union[StrictFloat, StrictInt] = Field(description="The discount applied to this line item.", alias="discountAmount")
    taxable_amount: Union[StrictFloat, StrictInt] = Field(description="The part of this line item's `subtotal` that is taxable.", alias="taxableAmount")
    tax_amount: Union[StrictFloat, StrictInt] = Field(description="The tax payable for this line item. This is the sum of all `taxes.taxAmount` for this line item.", alias="taxAmount")
    total: Union[StrictFloat, StrictInt] = Field(description="The total for this line item after discounts and taxes. This is the same as `subtotal` if it is tax inclusive; otherwise it is `subtotal` + `taxAmount`. `total` can also be expressed as `exemptAmount` + `taxableAmount` + `taxAmount`.")
    is_partial_tax: Optional[StrictBool] = Field(default=None, description="Indicates if taxes were applied only partially for this line item.", alias="isPartialTax")
    taxes: Annotated[List[TaxLineItem], Field(min_length=0, max_length=10)] = Field(description="List of taxes applied for this line item under each jurisdiction.")
    __properties: ClassVar[List[str]] = ["number", "itemCode", "description", "quantity", "unitPrice", "amount", "subtotal", "isTaxInclusive", "isTaxable", "taxIdentifiers", "taxExemptType", "taxExemptReason", "exemptAmount", "discountAmount", "taxableAmount", "taxAmount", "total", "isPartialTax", "taxes"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of InvoiceLineItem from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in tax_identifiers (list)
        _items = []
        if self.tax_identifiers:
            for _item_tax_identifiers in self.tax_identifiers:
                if _item_tax_identifiers:
                    _items.append(_item_tax_identifiers.to_dict())
            _dict['taxIdentifiers'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in taxes (list)
        _items = []
        if self.taxes:
            for _item_taxes in self.taxes:
                if _item_taxes:
                    _items.append(_item_taxes.to_dict())
            _dict['taxes'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of InvoiceLineItem from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "number": obj.get("number"),
            "itemCode": obj.get("itemCode"),
            "description": obj.get("description"),
            "quantity": obj.get("quantity"),
            "unitPrice": obj.get("unitPrice"),
            "amount": obj.get("amount"),
            "subtotal": obj.get("subtotal"),
            "isTaxInclusive": obj.get("isTaxInclusive"),
            "isTaxable": obj.get("isTaxable"),
            "taxIdentifiers": [FieldItem.from_dict(_item) for _item in obj["taxIdentifiers"]] if obj.get("taxIdentifiers") is not None else None,
            "taxExemptType": obj.get("taxExemptType"),
            "taxExemptReason": obj.get("taxExemptReason"),
            "exemptAmount": obj.get("exemptAmount"),
            "discountAmount": obj.get("discountAmount"),
            "taxableAmount": obj.get("taxableAmount"),
            "taxAmount": obj.get("taxAmount"),
            "total": obj.get("total"),
            "isPartialTax": obj.get("isPartialTax"),
            "taxes": [TaxLineItem.from_dict(_item) for _item in obj["taxes"]] if obj.get("taxes") is not None else None
        })
        return _obj


