/*
Taxes Service Adapter SPI

## Overview Tax Service Adapter is a Service Provider Interface (SPI) that helps Chargebee communicate with API platforms providing the following services: - Address validation - Estimating taxes for sales - Submitting invoices for tax filing  If you have an API that provides the services mentioned above and want Chargebee to be able to integrate with it, you can build an adapter service according to this specification.  ## Terminology Here's a list of terms we've used to describe this specification. ### Merchant    Chargebee’s customer who is carrying out the business of selling products. Also known as the Seller. The Seller has one or more Chargebee accounts. ### Chargebee   The SaaS which manages subscriptions and revenue operations on behalf of the Merchant. Chargebee makes API calls to the Tax Service Adapter for tax estimation and tax filing of transactions between the Merchant and the Customer. ### Customer  Merchant’s customer who purchases products from the Merchant. Their customer record(s) and other details are stored within Chargebee under the Merchant’s account. ### Tax Authority The institution, usually a government, that is responsible for collecting taxes for commercial transactions between Merchants and their Customers.   ### Tax Service Provider The service which provides tax estimation and tax filing services for merchants. ### Tax Service Adapter  The SPI for which the spec is defined in this document. This adapter serves the following purposes: - Translates API requests (as defined in this document) from Chargebee to the request format specified by the Tax Service Provider's API. - Translates API responses from the Tax Service Provider APIs to the format understood by Chargebee (as defined in this document). ### Authorization Chargebee uses HTTP header-based authorization for all the API endpoints associated with Tax Service Adapter. We dynamically pass this authorization key in the HTTP header. The parameter that holds this key is found in the JSON object `api_configuration` required for configuring your onboarding on Chargebee's marketplace. In the `api_configuration` object, our [Taxes Service Adapter SPI](https://chargebee.atlassian.net/l/cp/ca5aZ1mA) checks the authorization key parameter from `credential_configuration.id` and creates the HTTP header-based input query parameter for authorization. The `credential_configuration` is an array of objects with an `id` attribute, and the value of `id` is the parameter containing the authorization key.    Following are the JSON snippets for your reference.     ```json       \"api_configuration\": {           \"api_base_url\": \"https://xyz.abc.com/chargebee\",           \"credential_configuration\": [              {               \"id\":\"authorization_key\",               \"name\": \"Authorization Key\",                \"type\": \"text\",               \"is_sensitive\": true              },             {               \"id\": \"client_secret\",               \"name\": \"Client Secret\",               \"type\": \"text\",               \"is_sensitive\": true             }           ]         }    ```     `\"Authorization\":\"{\"<authorization_key>\":\"test_GykCvTykZFTBqHQAFzjMN9R1Thgdho0Q\"}\"` 

API version: 0.3.7
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the TaxLineItem type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &TaxLineItem{}

// TaxLineItem The details of tax applied under a specific jurisdiction.
type TaxLineItem struct {
	// Index or serial number of this tax line item.
	Number int32 `json:"number"`
	Jurisdiction TaxJurisdiction `json:"jurisdiction"`
	// The name of the tax applied.
	Name string `json:"name"`
	// The tax rate expressed in percentage.
	Rate float64 `json:"rate"`
	// The part of the line item's `subtotal` that is taxable under this jurisdiction.
	TaxableAmount float64 `json:"taxableAmount"`
	// The tax payable for the line item under this jurisdiction.
	TaxAmount float64 `json:"taxAmount"`
}

type _TaxLineItem TaxLineItem

// NewTaxLineItem instantiates a new TaxLineItem object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTaxLineItem(number int32, jurisdiction TaxJurisdiction, name string, rate float64, taxableAmount float64, taxAmount float64) *TaxLineItem {
	this := TaxLineItem{}
	this.Number = number
	this.Jurisdiction = jurisdiction
	this.Name = name
	this.Rate = rate
	this.TaxableAmount = taxableAmount
	this.TaxAmount = taxAmount
	return &this
}

// NewTaxLineItemWithDefaults instantiates a new TaxLineItem object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTaxLineItemWithDefaults() *TaxLineItem {
	this := TaxLineItem{}
	return &this
}

// GetNumber returns the Number field value
func (o *TaxLineItem) GetNumber() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Number
}

// GetNumberOk returns a tuple with the Number field value
// and a boolean to check if the value has been set.
func (o *TaxLineItem) GetNumberOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Number, true
}

// SetNumber sets field value
func (o *TaxLineItem) SetNumber(v int32) {
	o.Number = v
}

// GetJurisdiction returns the Jurisdiction field value
func (o *TaxLineItem) GetJurisdiction() TaxJurisdiction {
	if o == nil {
		var ret TaxJurisdiction
		return ret
	}

	return o.Jurisdiction
}

// GetJurisdictionOk returns a tuple with the Jurisdiction field value
// and a boolean to check if the value has been set.
func (o *TaxLineItem) GetJurisdictionOk() (*TaxJurisdiction, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Jurisdiction, true
}

// SetJurisdiction sets field value
func (o *TaxLineItem) SetJurisdiction(v TaxJurisdiction) {
	o.Jurisdiction = v
}

// GetName returns the Name field value
func (o *TaxLineItem) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *TaxLineItem) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *TaxLineItem) SetName(v string) {
	o.Name = v
}

// GetRate returns the Rate field value
func (o *TaxLineItem) GetRate() float64 {
	if o == nil {
		var ret float64
		return ret
	}

	return o.Rate
}

// GetRateOk returns a tuple with the Rate field value
// and a boolean to check if the value has been set.
func (o *TaxLineItem) GetRateOk() (*float64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Rate, true
}

// SetRate sets field value
func (o *TaxLineItem) SetRate(v float64) {
	o.Rate = v
}

// GetTaxableAmount returns the TaxableAmount field value
func (o *TaxLineItem) GetTaxableAmount() float64 {
	if o == nil {
		var ret float64
		return ret
	}

	return o.TaxableAmount
}

// GetTaxableAmountOk returns a tuple with the TaxableAmount field value
// and a boolean to check if the value has been set.
func (o *TaxLineItem) GetTaxableAmountOk() (*float64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.TaxableAmount, true
}

// SetTaxableAmount sets field value
func (o *TaxLineItem) SetTaxableAmount(v float64) {
	o.TaxableAmount = v
}

// GetTaxAmount returns the TaxAmount field value
func (o *TaxLineItem) GetTaxAmount() float64 {
	if o == nil {
		var ret float64
		return ret
	}

	return o.TaxAmount
}

// GetTaxAmountOk returns a tuple with the TaxAmount field value
// and a boolean to check if the value has been set.
func (o *TaxLineItem) GetTaxAmountOk() (*float64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.TaxAmount, true
}

// SetTaxAmount sets field value
func (o *TaxLineItem) SetTaxAmount(v float64) {
	o.TaxAmount = v
}

func (o TaxLineItem) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o TaxLineItem) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["number"] = o.Number
	toSerialize["jurisdiction"] = o.Jurisdiction
	toSerialize["name"] = o.Name
	toSerialize["rate"] = o.Rate
	toSerialize["taxableAmount"] = o.TaxableAmount
	toSerialize["taxAmount"] = o.TaxAmount
	return toSerialize, nil
}

func (o *TaxLineItem) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"number",
		"jurisdiction",
		"name",
		"rate",
		"taxableAmount",
		"taxAmount",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varTaxLineItem := _TaxLineItem{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varTaxLineItem)

	if err != nil {
		return err
	}

	*o = TaxLineItem(varTaxLineItem)

	return err
}

type NullableTaxLineItem struct {
	value *TaxLineItem
	isSet bool
}

func (v NullableTaxLineItem) Get() *TaxLineItem {
	return v.value
}

func (v *NullableTaxLineItem) Set(val *TaxLineItem) {
	v.value = val
	v.isSet = true
}

func (v NullableTaxLineItem) IsSet() bool {
	return v.isSet
}

func (v *NullableTaxLineItem) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTaxLineItem(val *TaxLineItem) *NullableTaxLineItem {
	return &NullableTaxLineItem{value: val, isSet: true}
}

func (v NullableTaxLineItem) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTaxLineItem) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


