from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model import Model
from openapi_server.models.health_status import HealthStatus
from openapi_server import util

from openapi_server.models.health_status import HealthStatus  # noqa: E501

class HealthCheckComponent(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, id=None, name=None, type=None, description=None, status=None, endpoints=None):  # noqa: E501
        """HealthCheckComponent - a model defined in OpenAPI

        :param id: The id of this HealthCheckComponent.  # noqa: E501
        :type id: str
        :param name: The name of this HealthCheckComponent.  # noqa: E501
        :type name: str
        :param type: The type of this HealthCheckComponent.  # noqa: E501
        :type type: str
        :param description: The description of this HealthCheckComponent.  # noqa: E501
        :type description: str
        :param status: The status of this HealthCheckComponent.  # noqa: E501
        :type status: HealthStatus
        :param endpoints: The endpoints of this HealthCheckComponent.  # noqa: E501
        :type endpoints: List[str]
        """
        self.openapi_types = {
            'id': str,
            'name': str,
            'type': str,
            'description': str,
            'status': HealthStatus,
            'endpoints': List[str]
        }

        self.attribute_map = {
            'id': 'id',
            'name': 'name',
            'type': 'type',
            'description': 'description',
            'status': 'status',
            'endpoints': 'endpoints'
        }

        self._id = id
        self._name = name
        self._type = type
        self._description = description
        self._status = status
        self._endpoints = endpoints

    @classmethod
    def from_dict(cls, dikt) -> 'HealthCheckComponent':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The HealthCheckComponent of this HealthCheckComponent.  # noqa: E501
        :rtype: HealthCheckComponent
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self) -> str:
        """Gets the id of this HealthCheckComponent.

        The id of the component.  # noqa: E501

        :return: The id of this HealthCheckComponent.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id: str):
        """Sets the id of this HealthCheckComponent.

        The id of the component.  # noqa: E501

        :param id: The id of this HealthCheckComponent.
        :type id: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501
        if id is not None and len(id) > 50:
            raise ValueError("Invalid value for `id`, length must be less than or equal to `50`")  # noqa: E501

        self._id = id

    @property
    def name(self) -> str:
        """Gets the name of this HealthCheckComponent.

        The name of the component.  # noqa: E501

        :return: The name of this HealthCheckComponent.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name: str):
        """Sets the name of this HealthCheckComponent.

        The name of the component.  # noqa: E501

        :param name: The name of this HealthCheckComponent.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501
        if name is not None and len(name) > 150:
            raise ValueError("Invalid value for `name`, length must be less than or equal to `150`")  # noqa: E501

        self._name = name

    @property
    def type(self) -> str:
        """Gets the type of this HealthCheckComponent.

        The type of component affected when `status` is `WARN` or `DOWN`. The possible values are: - `ADAPTER`: The reported status is for the Service Adapter. - `API`: The reported status is for the Service Provider. - `DATABASE`: The reported status is for a database dependency of the Service Provider. - `SYSTEM`: The reported status is for any other known system component such as cache or gateway. - `OTHER`: The reported status is either for a component that does not belong to the types described above or the source of the issue is unknown.   # noqa: E501

        :return: The type of this HealthCheckComponent.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type: str):
        """Sets the type of this HealthCheckComponent.

        The type of component affected when `status` is `WARN` or `DOWN`. The possible values are: - `ADAPTER`: The reported status is for the Service Adapter. - `API`: The reported status is for the Service Provider. - `DATABASE`: The reported status is for a database dependency of the Service Provider. - `SYSTEM`: The reported status is for any other known system component such as cache or gateway. - `OTHER`: The reported status is either for a component that does not belong to the types described above or the source of the issue is unknown.   # noqa: E501

        :param type: The type of this HealthCheckComponent.
        :type type: str
        """
        allowed_values = ["OTHER", "SYSTEM", "API", "ADAPTER", "DATABASE"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"
                .format(type, allowed_values)
            )

        self._type = type

    @property
    def description(self) -> str:
        """Gets the description of this HealthCheckComponent.

        The detailed status of the component.  # noqa: E501

        :return: The description of this HealthCheckComponent.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description: str):
        """Sets the description of this HealthCheckComponent.

        The detailed status of the component.  # noqa: E501

        :param description: The description of this HealthCheckComponent.
        :type description: str
        """
        if description is not None and len(description) > 250:
            raise ValueError("Invalid value for `description`, length must be less than or equal to `250`")  # noqa: E501

        self._description = description

    @property
    def status(self) -> HealthStatus:
        """Gets the status of this HealthCheckComponent.


        :return: The status of this HealthCheckComponent.
        :rtype: HealthStatus
        """
        return self._status

    @status.setter
    def status(self, status: HealthStatus):
        """Sets the status of this HealthCheckComponent.


        :param status: The status of this HealthCheckComponent.
        :type status: HealthStatus
        """
        if status is None:
            raise ValueError("Invalid value for `status`, must not be `None`")  # noqa: E501

        self._status = status

    @property
    def endpoints(self) -> List[str]:
        """Gets the endpoints of this HealthCheckComponent.

        When the `status` of the component is not `UP`, then the list of endpoints affected.  # noqa: E501

        :return: The endpoints of this HealthCheckComponent.
        :rtype: List[str]
        """
        return self._endpoints

    @endpoints.setter
    def endpoints(self, endpoints: List[str]):
        """Sets the endpoints of this HealthCheckComponent.

        When the `status` of the component is not `UP`, then the list of endpoints affected.  # noqa: E501

        :param endpoints: The endpoints of this HealthCheckComponent.
        :type endpoints: List[str]
        """

        self._endpoints = endpoints
