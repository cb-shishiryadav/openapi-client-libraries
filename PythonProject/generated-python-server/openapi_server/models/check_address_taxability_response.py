from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model import Model
from openapi_server import util


class CheckAddressTaxabilityResponse(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, is_taxable=None):  # noqa: E501
        """CheckAddressTaxabilityResponse - a model defined in OpenAPI

        :param is_taxable: The is_taxable of this CheckAddressTaxabilityResponse.  # noqa: E501
        :type is_taxable: bool
        """
        self.openapi_types = {
            'is_taxable': bool
        }

        self.attribute_map = {
            'is_taxable': 'isTaxable'
        }

        self._is_taxable = is_taxable

    @classmethod
    def from_dict(cls, dikt) -> 'CheckAddressTaxabilityResponse':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The CheckAddressTaxabilityResponse of this CheckAddressTaxabilityResponse.  # noqa: E501
        :rtype: CheckAddressTaxabilityResponse
        """
        return util.deserialize_model(dikt, cls)

    @property
    def is_taxable(self) -> bool:
        """Gets the is_taxable of this CheckAddressTaxabilityResponse.

        The taxability of the address.  # noqa: E501

        :return: The is_taxable of this CheckAddressTaxabilityResponse.
        :rtype: bool
        """
        return self._is_taxable

    @is_taxable.setter
    def is_taxable(self, is_taxable: bool):
        """Sets the is_taxable of this CheckAddressTaxabilityResponse.

        The taxability of the address.  # noqa: E501

        :param is_taxable: The is_taxable of this CheckAddressTaxabilityResponse.
        :type is_taxable: bool
        """
        if is_taxable is None:
            raise ValueError("Invalid value for `is_taxable`, must not be `None`")  # noqa: E501

        self._is_taxable = is_taxable
