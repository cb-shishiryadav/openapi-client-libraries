from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model import Model
from openapi_server.models.customer import Customer
from openapi_server.models.invoice_line_item import InvoiceLineItem
from openapi_server.models.seller import Seller
from openapi_server import util

from openapi_server.models.customer import Customer  # noqa: E501
from openapi_server.models.invoice_line_item import InvoiceLineItem  # noqa: E501
from openapi_server.models.seller import Seller  # noqa: E501

class TaxEstimationResponse(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, seller=None, customer=None, estimate_date_time=None, currency=None, subtotal=None, exempt_amount=None, discount_amount=None, taxable_amount=None, tax_amount=None, total=None, line_items=None):  # noqa: E501
        """TaxEstimationResponse - a model defined in OpenAPI

        :param seller: The seller of this TaxEstimationResponse.  # noqa: E501
        :type seller: Seller
        :param customer: The customer of this TaxEstimationResponse.  # noqa: E501
        :type customer: Customer
        :param estimate_date_time: The estimate_date_time of this TaxEstimationResponse.  # noqa: E501
        :type estimate_date_time: datetime
        :param currency: The currency of this TaxEstimationResponse.  # noqa: E501
        :type currency: str
        :param subtotal: The subtotal of this TaxEstimationResponse.  # noqa: E501
        :type subtotal: float
        :param exempt_amount: The exempt_amount of this TaxEstimationResponse.  # noqa: E501
        :type exempt_amount: float
        :param discount_amount: The discount_amount of this TaxEstimationResponse.  # noqa: E501
        :type discount_amount: float
        :param taxable_amount: The taxable_amount of this TaxEstimationResponse.  # noqa: E501
        :type taxable_amount: float
        :param tax_amount: The tax_amount of this TaxEstimationResponse.  # noqa: E501
        :type tax_amount: float
        :param total: The total of this TaxEstimationResponse.  # noqa: E501
        :type total: float
        :param line_items: The line_items of this TaxEstimationResponse.  # noqa: E501
        :type line_items: List[InvoiceLineItem]
        """
        self.openapi_types = {
            'seller': Seller,
            'customer': Customer,
            'estimate_date_time': datetime,
            'currency': str,
            'subtotal': float,
            'exempt_amount': float,
            'discount_amount': float,
            'taxable_amount': float,
            'tax_amount': float,
            'total': float,
            'line_items': List[InvoiceLineItem]
        }

        self.attribute_map = {
            'seller': 'seller',
            'customer': 'customer',
            'estimate_date_time': 'estimateDateTime',
            'currency': 'currency',
            'subtotal': 'subtotal',
            'exempt_amount': 'exemptAmount',
            'discount_amount': 'discountAmount',
            'taxable_amount': 'taxableAmount',
            'tax_amount': 'taxAmount',
            'total': 'total',
            'line_items': 'lineItems'
        }

        self._seller = seller
        self._customer = customer
        self._estimate_date_time = estimate_date_time
        self._currency = currency
        self._subtotal = subtotal
        self._exempt_amount = exempt_amount
        self._discount_amount = discount_amount
        self._taxable_amount = taxable_amount
        self._tax_amount = tax_amount
        self._total = total
        self._line_items = line_items

    @classmethod
    def from_dict(cls, dikt) -> 'TaxEstimationResponse':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The TaxEstimationResponse of this TaxEstimationResponse.  # noqa: E501
        :rtype: TaxEstimationResponse
        """
        return util.deserialize_model(dikt, cls)

    @property
    def seller(self) -> Seller:
        """Gets the seller of this TaxEstimationResponse.


        :return: The seller of this TaxEstimationResponse.
        :rtype: Seller
        """
        return self._seller

    @seller.setter
    def seller(self, seller: Seller):
        """Sets the seller of this TaxEstimationResponse.


        :param seller: The seller of this TaxEstimationResponse.
        :type seller: Seller
        """
        if seller is None:
            raise ValueError("Invalid value for `seller`, must not be `None`")  # noqa: E501

        self._seller = seller

    @property
    def customer(self) -> Customer:
        """Gets the customer of this TaxEstimationResponse.


        :return: The customer of this TaxEstimationResponse.
        :rtype: Customer
        """
        return self._customer

    @customer.setter
    def customer(self, customer: Customer):
        """Sets the customer of this TaxEstimationResponse.


        :param customer: The customer of this TaxEstimationResponse.
        :type customer: Customer
        """
        if customer is None:
            raise ValueError("Invalid value for `customer`, must not be `None`")  # noqa: E501

        self._customer = customer

    @property
    def estimate_date_time(self) -> datetime:
        """Gets the estimate_date_time of this TaxEstimationResponse.

        The time as of which the tax estimation is to be calculated. This can be a value in the past. For example, if the value is provided as 2022-10-28T15:36:28.129+05:30, then the tax rates applicable on October 28, 2022, at 15:36:28.129, with an offset of +05:30 ahead of UTC/GMT are used for calculations. In case of a merchant site located in UTC, these data types would send a timestamp in the format 2022-11-11T15:40:44.65Z. This timestamp represents November 11, 2022, at 15:40:44.65, with the 'Z' indicating that the time is in UTC  # noqa: E501

        :return: The estimate_date_time of this TaxEstimationResponse.
        :rtype: datetime
        """
        return self._estimate_date_time

    @estimate_date_time.setter
    def estimate_date_time(self, estimate_date_time: datetime):
        """Sets the estimate_date_time of this TaxEstimationResponse.

        The time as of which the tax estimation is to be calculated. This can be a value in the past. For example, if the value is provided as 2022-10-28T15:36:28.129+05:30, then the tax rates applicable on October 28, 2022, at 15:36:28.129, with an offset of +05:30 ahead of UTC/GMT are used for calculations. In case of a merchant site located in UTC, these data types would send a timestamp in the format 2022-11-11T15:40:44.65Z. This timestamp represents November 11, 2022, at 15:40:44.65, with the 'Z' indicating that the time is in UTC  # noqa: E501

        :param estimate_date_time: The estimate_date_time of this TaxEstimationResponse.
        :type estimate_date_time: datetime
        """
        if estimate_date_time is None:
            raise ValueError("Invalid value for `estimate_date_time`, must not be `None`")  # noqa: E501

        self._estimate_date_time = estimate_date_time

    @property
    def currency(self) -> str:
        """Gets the currency of this TaxEstimationResponse.

        The [currency](https://en.wikipedia.org/wiki/Currency) in the [ISO-4217 format](https://www.iso.org/iso-4217-currency-codes.html).  # noqa: E501

        :return: The currency of this TaxEstimationResponse.
        :rtype: str
        """
        return self._currency

    @currency.setter
    def currency(self, currency: str):
        """Sets the currency of this TaxEstimationResponse.

        The [currency](https://en.wikipedia.org/wiki/Currency) in the [ISO-4217 format](https://www.iso.org/iso-4217-currency-codes.html).  # noqa: E501

        :param currency: The currency of this TaxEstimationResponse.
        :type currency: str
        """
        if currency is None:
            raise ValueError("Invalid value for `currency`, must not be `None`")  # noqa: E501
        if currency is not None and len(currency) > 3:
            raise ValueError("Invalid value for `currency`, length must be less than or equal to `3`")  # noqa: E501
        if currency is not None and len(currency) < 3:
            raise ValueError("Invalid value for `currency`, length must be greater than or equal to `3`")  # noqa: E501

        self._currency = currency

    @property
    def subtotal(self) -> float:
        """Gets the subtotal of this TaxEstimationResponse.

        The amount after discounts. This is the sum of all `lineItems.subtotal`.  # noqa: E501

        :return: The subtotal of this TaxEstimationResponse.
        :rtype: float
        """
        return self._subtotal

    @subtotal.setter
    def subtotal(self, subtotal: float):
        """Sets the subtotal of this TaxEstimationResponse.

        The amount after discounts. This is the sum of all `lineItems.subtotal`.  # noqa: E501

        :param subtotal: The subtotal of this TaxEstimationResponse.
        :type subtotal: float
        """
        if subtotal is None:
            raise ValueError("Invalid value for `subtotal`, must not be `None`")  # noqa: E501

        self._subtotal = subtotal

    @property
    def exempt_amount(self) -> float:
        """Gets the exempt_amount of this TaxEstimationResponse.

        The part of the `subtotal` that is exempted from tax.  # noqa: E501

        :return: The exempt_amount of this TaxEstimationResponse.
        :rtype: float
        """
        return self._exempt_amount

    @exempt_amount.setter
    def exempt_amount(self, exempt_amount: float):
        """Sets the exempt_amount of this TaxEstimationResponse.

        The part of the `subtotal` that is exempted from tax.  # noqa: E501

        :param exempt_amount: The exempt_amount of this TaxEstimationResponse.
        :type exempt_amount: float
        """
        if exempt_amount is None:
            raise ValueError("Invalid value for `exempt_amount`, must not be `None`")  # noqa: E501

        self._exempt_amount = exempt_amount

    @property
    def discount_amount(self) -> float:
        """Gets the discount_amount of this TaxEstimationResponse.

        The total discount applied. This is the sum of all `lineItems.discount`.  # noqa: E501

        :return: The discount_amount of this TaxEstimationResponse.
        :rtype: float
        """
        return self._discount_amount

    @discount_amount.setter
    def discount_amount(self, discount_amount: float):
        """Sets the discount_amount of this TaxEstimationResponse.

        The total discount applied. This is the sum of all `lineItems.discount`.  # noqa: E501

        :param discount_amount: The discount_amount of this TaxEstimationResponse.
        :type discount_amount: float
        """
        if discount_amount is None:
            raise ValueError("Invalid value for `discount_amount`, must not be `None`")  # noqa: E501

        self._discount_amount = discount_amount

    @property
    def taxable_amount(self) -> float:
        """Gets the taxable_amount of this TaxEstimationResponse.

        The part of the `subtotal` that is taxable.  # noqa: E501

        :return: The taxable_amount of this TaxEstimationResponse.
        :rtype: float
        """
        return self._taxable_amount

    @taxable_amount.setter
    def taxable_amount(self, taxable_amount: float):
        """Sets the taxable_amount of this TaxEstimationResponse.

        The part of the `subtotal` that is taxable.  # noqa: E501

        :param taxable_amount: The taxable_amount of this TaxEstimationResponse.
        :type taxable_amount: float
        """
        if taxable_amount is None:
            raise ValueError("Invalid value for `taxable_amount`, must not be `None`")  # noqa: E501

        self._taxable_amount = taxable_amount

    @property
    def tax_amount(self) -> float:
        """Gets the tax_amount of this TaxEstimationResponse.

        The total tax payable. This is the sum of all `lineItems.taxAmount`.  # noqa: E501

        :return: The tax_amount of this TaxEstimationResponse.
        :rtype: float
        """
        return self._tax_amount

    @tax_amount.setter
    def tax_amount(self, tax_amount: float):
        """Sets the tax_amount of this TaxEstimationResponse.

        The total tax payable. This is the sum of all `lineItems.taxAmount`.  # noqa: E501

        :param tax_amount: The tax_amount of this TaxEstimationResponse.
        :type tax_amount: float
        """
        if tax_amount is None:
            raise ValueError("Invalid value for `tax_amount`, must not be `None`")  # noqa: E501

        self._tax_amount = tax_amount

    @property
    def total(self) -> float:
        """Gets the total of this TaxEstimationResponse.

        The total after discounts and taxes. This is the same as `subtotal` if it is tax inclusive; otherwise it is `subtotal` + `taxAmount`. `total` can also be expressed as `exemptAmount` + `taxableAmount` + `taxAmount`.  # noqa: E501

        :return: The total of this TaxEstimationResponse.
        :rtype: float
        """
        return self._total

    @total.setter
    def total(self, total: float):
        """Sets the total of this TaxEstimationResponse.

        The total after discounts and taxes. This is the same as `subtotal` if it is tax inclusive; otherwise it is `subtotal` + `taxAmount`. `total` can also be expressed as `exemptAmount` + `taxableAmount` + `taxAmount`.  # noqa: E501

        :param total: The total of this TaxEstimationResponse.
        :type total: float
        """
        if total is None:
            raise ValueError("Invalid value for `total`, must not be `None`")  # noqa: E501

        self._total = total

    @property
    def line_items(self) -> List[InvoiceLineItem]:
        """Gets the line_items of this TaxEstimationResponse.

        List of line item details for the tax estimation response.  # noqa: E501

        :return: The line_items of this TaxEstimationResponse.
        :rtype: List[InvoiceLineItem]
        """
        return self._line_items

    @line_items.setter
    def line_items(self, line_items: List[InvoiceLineItem]):
        """Sets the line_items of this TaxEstimationResponse.

        List of line item details for the tax estimation response.  # noqa: E501

        :param line_items: The line_items of this TaxEstimationResponse.
        :type line_items: List[InvoiceLineItem]
        """
        if line_items is None:
            raise ValueError("Invalid value for `line_items`, must not be `None`")  # noqa: E501
        if line_items is not None and len(line_items) > 1250:
            raise ValueError("Invalid value for `line_items`, number of items must be less than or equal to `1250`")  # noqa: E501
        if line_items is not None and len(line_items) < 1:
            raise ValueError("Invalid value for `line_items`, number of items must be greater than or equal to `1`")  # noqa: E501

        self._line_items = line_items
