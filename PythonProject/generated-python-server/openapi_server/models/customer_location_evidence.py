from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model import Model
from openapi_server import util


class CustomerLocationEvidence(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, ip=None, bin=None, payment_country_code=None):  # noqa: E501
        """CustomerLocationEvidence - a model defined in OpenAPI

        :param ip: The ip of this CustomerLocationEvidence.  # noqa: E501
        :type ip: str
        :param bin: The bin of this CustomerLocationEvidence.  # noqa: E501
        :type bin: str
        :param payment_country_code: The payment_country_code of this CustomerLocationEvidence.  # noqa: E501
        :type payment_country_code: str
        """
        self.openapi_types = {
            'ip': str,
            'bin': str,
            'payment_country_code': str
        }

        self.attribute_map = {
            'ip': 'ip',
            'bin': 'bin',
            'payment_country_code': 'paymentCountryCode'
        }

        self._ip = ip
        self._bin = bin
        self._payment_country_code = payment_country_code

    @classmethod
    def from_dict(cls, dikt) -> 'CustomerLocationEvidence':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The CustomerLocationEvidence of this CustomerLocationEvidence.  # noqa: E501
        :rtype: CustomerLocationEvidence
        """
        return util.deserialize_model(dikt, cls)

    @property
    def ip(self) -> str:
        """Gets the ip of this CustomerLocationEvidence.

        The customer's IP to determine which country the customer belongs to.  # noqa: E501

        :return: The ip of this CustomerLocationEvidence.
        :rtype: str
        """
        return self._ip

    @ip.setter
    def ip(self, ip: str):
        """Sets the ip of this CustomerLocationEvidence.

        The customer's IP to determine which country the customer belongs to.  # noqa: E501

        :param ip: The ip of this CustomerLocationEvidence.
        :type ip: str
        """
        if ip is not None and len(ip) > 50:
            raise ValueError("Invalid value for `ip`, length must be less than or equal to `50`")  # noqa: E501

        self._ip = ip

    @property
    def bin(self) -> str:
        """Gets the bin of this CustomerLocationEvidence.

        The country associated with a card by using the first or last 6 digits of the Bank Identification Number.  # noqa: E501

        :return: The bin of this CustomerLocationEvidence.
        :rtype: str
        """
        return self._bin

    @bin.setter
    def bin(self, bin: str):
        """Sets the bin of this CustomerLocationEvidence.

        The country associated with a card by using the first or last 6 digits of the Bank Identification Number.  # noqa: E501

        :param bin: The bin of this CustomerLocationEvidence.
        :type bin: str
        """
        if bin is not None and len(bin) > 15:
            raise ValueError("Invalid value for `bin`, length must be less than or equal to `15`")  # noqa: E501

        self._bin = bin

    @property
    def payment_country_code(self) -> str:
        """Gets the payment_country_code of this CustomerLocationEvidence.

        Identifies the country code associated with the payment method.  # noqa: E501

        :return: The payment_country_code of this CustomerLocationEvidence.
        :rtype: str
        """
        return self._payment_country_code

    @payment_country_code.setter
    def payment_country_code(self, payment_country_code: str):
        """Sets the payment_country_code of this CustomerLocationEvidence.

        Identifies the country code associated with the payment method.  # noqa: E501

        :param payment_country_code: The payment_country_code of this CustomerLocationEvidence.
        :type payment_country_code: str
        """
        if payment_country_code is not None and len(payment_country_code) > 5:
            raise ValueError("Invalid value for `payment_country_code`, length must be less than or equal to `5`")  # noqa: E501

        self._payment_country_code = payment_country_code
