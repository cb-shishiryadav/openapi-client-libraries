/*
Taxes Service Adapter SPI

## Overview Tax Service Adapter is a Service Provider Interface (SPI) that helps Chargebee communicate with API platforms providing the following services: - Address validation - Estimating taxes for sales - Submitting invoices for tax filing  If you have an API that provides the services mentioned above and want Chargebee to be able to integrate with it, you can build an adapter service according to this specification.  ## Terminology Here's a list of terms we've used to describe this specification. ### Merchant    Chargebee’s customer who is carrying out the business of selling products. Also known as the Seller. The Seller has one or more Chargebee accounts. ### Chargebee   The SaaS which manages subscriptions and revenue operations on behalf of the Merchant. Chargebee makes API calls to the Tax Service Adapter for tax estimation and tax filing of transactions between the Merchant and the Customer. ### Customer  Merchant’s customer who purchases products from the Merchant. Their customer record(s) and other details are stored within Chargebee under the Merchant’s account. ### Tax Authority The institution, usually a government, that is responsible for collecting taxes for commercial transactions between Merchants and their Customers.   ### Tax Service Provider The service which provides tax estimation and tax filing services for merchants. ### Tax Service Adapter  The SPI for which the spec is defined in this document. This adapter serves the following purposes: - Translates API requests (as defined in this document) from Chargebee to the request format specified by the Tax Service Provider's API. - Translates API responses from the Tax Service Provider APIs to the format understood by Chargebee (as defined in this document). ### Authorization Chargebee uses HTTP header-based authorization for all the API endpoints associated with Tax Service Adapter. We dynamically pass this authorization key in the HTTP header. The parameter that holds this key is found in the JSON object `api_configuration` required for configuring your onboarding on Chargebee's marketplace. In the `api_configuration` object, our [Taxes Service Adapter SPI](https://chargebee.atlassian.net/l/cp/ca5aZ1mA) checks the authorization key parameter from `credential_configuration.id` and creates the HTTP header-based input query parameter for authorization. The `credential_configuration` is an array of objects with an `id` attribute, and the value of `id` is the parameter containing the authorization key.    Following are the JSON snippets for your reference.     ```json       \"api_configuration\": {           \"api_base_url\": \"https://xyz.abc.com/chargebee\",           \"credential_configuration\": [              {               \"id\":\"authorization_key\",               \"name\": \"Authorization Key\",                \"type\": \"text\",               \"is_sensitive\": true              },             {               \"id\": \"client_secret\",               \"name\": \"Client Secret\",               \"type\": \"text\",               \"is_sensitive\": true             }           ]         }    ```     `\"Authorization\":\"{\"<authorization_key>\":\"test_GykCvTykZFTBqHQAFzjMN9R1Thgdho0Q\"}\"` 

API version: 0.3.7
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the Seller type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Seller{}

// Seller The details of the seller involved in the transaction including company code and address.
type Seller struct {
	// The tax registration number of a business in a country. For example, this is the GSTIN for India or the VAT number for EU or Australia.
	TaxRegistrationNumber NullableString `json:"taxRegistrationNumber,omitempty"`
	Address Address `json:"address"`
	// Determines whether a tax nexus exists between the Seller and the tax authority at the address provided.
	HasNexus *bool `json:"hasNexus,omitempty"`
}

type _Seller Seller

// NewSeller instantiates a new Seller object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSeller(address Address) *Seller {
	this := Seller{}
	this.Address = address
	return &this
}

// NewSellerWithDefaults instantiates a new Seller object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSellerWithDefaults() *Seller {
	this := Seller{}
	return &this
}

// GetTaxRegistrationNumber returns the TaxRegistrationNumber field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Seller) GetTaxRegistrationNumber() string {
	if o == nil || IsNil(o.TaxRegistrationNumber.Get()) {
		var ret string
		return ret
	}
	return *o.TaxRegistrationNumber.Get()
}

// GetTaxRegistrationNumberOk returns a tuple with the TaxRegistrationNumber field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Seller) GetTaxRegistrationNumberOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.TaxRegistrationNumber.Get(), o.TaxRegistrationNumber.IsSet()
}

// HasTaxRegistrationNumber returns a boolean if a field has been set.
func (o *Seller) HasTaxRegistrationNumber() bool {
	if o != nil && o.TaxRegistrationNumber.IsSet() {
		return true
	}

	return false
}

// SetTaxRegistrationNumber gets a reference to the given NullableString and assigns it to the TaxRegistrationNumber field.
func (o *Seller) SetTaxRegistrationNumber(v string) {
	o.TaxRegistrationNumber.Set(&v)
}
// SetTaxRegistrationNumberNil sets the value for TaxRegistrationNumber to be an explicit nil
func (o *Seller) SetTaxRegistrationNumberNil() {
	o.TaxRegistrationNumber.Set(nil)
}

// UnsetTaxRegistrationNumber ensures that no value is present for TaxRegistrationNumber, not even an explicit nil
func (o *Seller) UnsetTaxRegistrationNumber() {
	o.TaxRegistrationNumber.Unset()
}

// GetAddress returns the Address field value
func (o *Seller) GetAddress() Address {
	if o == nil {
		var ret Address
		return ret
	}

	return o.Address
}

// GetAddressOk returns a tuple with the Address field value
// and a boolean to check if the value has been set.
func (o *Seller) GetAddressOk() (*Address, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Address, true
}

// SetAddress sets field value
func (o *Seller) SetAddress(v Address) {
	o.Address = v
}

// GetHasNexus returns the HasNexus field value if set, zero value otherwise.
func (o *Seller) GetHasNexus() bool {
	if o == nil || IsNil(o.HasNexus) {
		var ret bool
		return ret
	}
	return *o.HasNexus
}

// GetHasNexusOk returns a tuple with the HasNexus field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Seller) GetHasNexusOk() (*bool, bool) {
	if o == nil || IsNil(o.HasNexus) {
		return nil, false
	}
	return o.HasNexus, true
}

// HasHasNexus returns a boolean if a field has been set.
func (o *Seller) HasHasNexus() bool {
	if o != nil && !IsNil(o.HasNexus) {
		return true
	}

	return false
}

// SetHasNexus gets a reference to the given bool and assigns it to the HasNexus field.
func (o *Seller) SetHasNexus(v bool) {
	o.HasNexus = &v
}

func (o Seller) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Seller) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.TaxRegistrationNumber.IsSet() {
		toSerialize["taxRegistrationNumber"] = o.TaxRegistrationNumber.Get()
	}
	toSerialize["address"] = o.Address
	if !IsNil(o.HasNexus) {
		toSerialize["hasNexus"] = o.HasNexus
	}
	return toSerialize, nil
}

func (o *Seller) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"address",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varSeller := _Seller{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varSeller)

	if err != nil {
		return err
	}

	*o = Seller(varSeller)

	return err
}

type NullableSeller struct {
	value *Seller
	isSet bool
}

func (v NullableSeller) Get() *Seller {
	return v.value
}

func (v *NullableSeller) Set(val *Seller) {
	v.value = val
	v.isSet = true
}

func (v NullableSeller) IsSet() bool {
	return v.isSet
}

func (v *NullableSeller) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSeller(val *Seller) *NullableSeller {
	return &NullableSeller{value: val, isSet: true}
}

func (v NullableSeller) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSeller) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


