/*
Taxes Service Adapter SPI

## Overview Tax Service Adapter is a Service Provider Interface (SPI) that helps Chargebee communicate with API platforms providing the following services: - Address validation - Estimating taxes for sales - Submitting invoices for tax filing  If you have an API that provides the services mentioned above and want Chargebee to be able to integrate with it, you can build an adapter service according to this specification.  ## Terminology Here's a list of terms we've used to describe this specification. ### Merchant    Chargebee’s customer who is carrying out the business of selling products. Also known as the Seller. The Seller has one or more Chargebee accounts. ### Chargebee   The SaaS which manages subscriptions and revenue operations on behalf of the Merchant. Chargebee makes API calls to the Tax Service Adapter for tax estimation and tax filing of transactions between the Merchant and the Customer. ### Customer  Merchant’s customer who purchases products from the Merchant. Their customer record(s) and other details are stored within Chargebee under the Merchant’s account. ### Tax Authority The institution, usually a government, that is responsible for collecting taxes for commercial transactions between Merchants and their Customers.   ### Tax Service Provider The service which provides tax estimation and tax filing services for merchants. ### Tax Service Adapter  The SPI for which the spec is defined in this document. This adapter serves the following purposes: - Translates API requests (as defined in this document) from Chargebee to the request format specified by the Tax Service Provider's API. - Translates API responses from the Tax Service Provider APIs to the format understood by Chargebee (as defined in this document). ### Authorization Chargebee uses HTTP header-based authorization for all the API endpoints associated with Tax Service Adapter. We dynamically pass this authorization key in the HTTP header. The parameter that holds this key is found in the JSON object `api_configuration` required for configuring your onboarding on Chargebee's marketplace. In the `api_configuration` object, our [Taxes Service Adapter SPI](https://chargebee.atlassian.net/l/cp/ca5aZ1mA) checks the authorization key parameter from `credential_configuration.id` and creates the HTTP header-based input query parameter for authorization. The `credential_configuration` is an array of objects with an `id` attribute, and the value of `id` is the parameter containing the authorization key.    Following are the JSON snippets for your reference.     ```json       \"api_configuration\": {           \"api_base_url\": \"https://xyz.abc.com/chargebee\",           \"credential_configuration\": [              {               \"id\":\"authorization_key\",               \"name\": \"Authorization Key\",                \"type\": \"text\",               \"is_sensitive\": true              },             {               \"id\": \"client_secret\",               \"name\": \"Client Secret\",               \"type\": \"text\",               \"is_sensitive\": true             }           ]         }    ```     `\"Authorization\":\"{\"<authorization_key>\":\"test_GykCvTykZFTBqHQAFzjMN9R1Thgdho0Q\"}\"` 

API version: 0.3.7
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"time"
	"bytes"
	"fmt"
)

// checks if the CreditNoteRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CreditNoteRequest{}

// CreditNoteRequest The details of a credit note sent to the Tax Service Adapter by Chargebee. A credit note is used to reduce the amount due on an invoice. If the credit note is issued after payments have been made for the invoice, refunds can be issued to the Customer.
type CreditNoteRequest struct {
	// The unique identifier of the credit note in Chargebee.
	CreditNoteCode string `json:"creditNoteCode"`
	// The unique identifier of the invoice in Chargebee to which this credit note belongs.
	InvoiceCode *string `json:"invoiceCode,omitempty"`
	// The unique identifier of the invoice in the Tax Service Adapter or the Tax Service Provider.
	InvoiceId *string `json:"invoiceId,omitempty"`
	CreditNoteType CreditNoteType `json:"creditNoteType"`
	// The date and time at which the credit note was created in Chargebee. For example, if the value is 2022-10-28T15:36:28.129+05:30, then the timestamp represents October 28, 2022, at 15:36:28.129, with an offset of +05:30. This means that the time represented is 5 hours and 30 minutes ahead of UTC/GMT. In the case of a merchant site located in UTC, these data types would send a timestamp in the format 2022-11-11T15:40:44.65Z. This timestamp represents November 11, 2022, at 15:40:44.65, with the 'Z' indicating that the time is in UTC.
	DocumentDateTime time.Time `json:"documentDateTime"`
	// The date and time at which the tax was applicable in Chargebee. For example, if the value is 2022-10-28T15:36:28.129+05:30, then the timestamp represents October 28, 2022, at 15:36:28.129, with an offset of +05:30. This means that the time represented is 5 hours and 30 minutes ahead of UTC/GMT.In the case of a merchant site located in UTC, these data types would send a timestamp in the format 2022-11-11T15:40:44.65Z. This timestamp represents November 11, 2022, at 15:40:44.65, with the 'Z' indicating that the time is in UTC.
	TaxDateTime *time.Time `json:"taxDateTime,omitempty"`
	// The [currency](https://en.wikipedia.org/wiki/Currency) in the [ISO-4217 format](https://www.iso.org/iso-4217-currency-codes.html).
	Currency string `json:"currency"`
	Seller Seller `json:"seller"`
	Customer Customer `json:"customer"`
	// The total amount of the credit note. `total` can be expressed as `exemptAmount` + `taxableAmount` + `taxAmount`.
	Total float64 `json:"total"`
	// The amount exempted from tax.
	ExemptAmount float64 `json:"exemptAmount"`
	// The total discount applied. This is the sum of all `lineItems.discount`.
	DiscountAmount float64 `json:"discountAmount"`
	// The amount upon which the tax is calculated.
	TaxableAmount float64 `json:"taxableAmount"`
	// The total tax payable. This is the sum of all `lineItems.taxAmount`.
	TaxAmount float64 `json:"taxAmount"`
	// The rounding amount added to the total amount to account for fractional correction.
	RoundingAmount *float64 `json:"roundingAmount,omitempty"`
	LineItems []InvoiceLineItem `json:"lineItems,omitempty"`
}

type _CreditNoteRequest CreditNoteRequest

// NewCreditNoteRequest instantiates a new CreditNoteRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCreditNoteRequest(creditNoteCode string, creditNoteType CreditNoteType, documentDateTime time.Time, currency string, seller Seller, customer Customer, total float64, exemptAmount float64, discountAmount float64, taxableAmount float64, taxAmount float64) *CreditNoteRequest {
	this := CreditNoteRequest{}
	this.CreditNoteCode = creditNoteCode
	this.CreditNoteType = creditNoteType
	this.DocumentDateTime = documentDateTime
	this.Currency = currency
	this.Seller = seller
	this.Customer = customer
	this.Total = total
	this.ExemptAmount = exemptAmount
	this.DiscountAmount = discountAmount
	this.TaxableAmount = taxableAmount
	this.TaxAmount = taxAmount
	return &this
}

// NewCreditNoteRequestWithDefaults instantiates a new CreditNoteRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCreditNoteRequestWithDefaults() *CreditNoteRequest {
	this := CreditNoteRequest{}
	return &this
}

// GetCreditNoteCode returns the CreditNoteCode field value
func (o *CreditNoteRequest) GetCreditNoteCode() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.CreditNoteCode
}

// GetCreditNoteCodeOk returns a tuple with the CreditNoteCode field value
// and a boolean to check if the value has been set.
func (o *CreditNoteRequest) GetCreditNoteCodeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CreditNoteCode, true
}

// SetCreditNoteCode sets field value
func (o *CreditNoteRequest) SetCreditNoteCode(v string) {
	o.CreditNoteCode = v
}

// GetInvoiceCode returns the InvoiceCode field value if set, zero value otherwise.
func (o *CreditNoteRequest) GetInvoiceCode() string {
	if o == nil || IsNil(o.InvoiceCode) {
		var ret string
		return ret
	}
	return *o.InvoiceCode
}

// GetInvoiceCodeOk returns a tuple with the InvoiceCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreditNoteRequest) GetInvoiceCodeOk() (*string, bool) {
	if o == nil || IsNil(o.InvoiceCode) {
		return nil, false
	}
	return o.InvoiceCode, true
}

// HasInvoiceCode returns a boolean if a field has been set.
func (o *CreditNoteRequest) HasInvoiceCode() bool {
	if o != nil && !IsNil(o.InvoiceCode) {
		return true
	}

	return false
}

// SetInvoiceCode gets a reference to the given string and assigns it to the InvoiceCode field.
func (o *CreditNoteRequest) SetInvoiceCode(v string) {
	o.InvoiceCode = &v
}

// GetInvoiceId returns the InvoiceId field value if set, zero value otherwise.
func (o *CreditNoteRequest) GetInvoiceId() string {
	if o == nil || IsNil(o.InvoiceId) {
		var ret string
		return ret
	}
	return *o.InvoiceId
}

// GetInvoiceIdOk returns a tuple with the InvoiceId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreditNoteRequest) GetInvoiceIdOk() (*string, bool) {
	if o == nil || IsNil(o.InvoiceId) {
		return nil, false
	}
	return o.InvoiceId, true
}

// HasInvoiceId returns a boolean if a field has been set.
func (o *CreditNoteRequest) HasInvoiceId() bool {
	if o != nil && !IsNil(o.InvoiceId) {
		return true
	}

	return false
}

// SetInvoiceId gets a reference to the given string and assigns it to the InvoiceId field.
func (o *CreditNoteRequest) SetInvoiceId(v string) {
	o.InvoiceId = &v
}

// GetCreditNoteType returns the CreditNoteType field value
func (o *CreditNoteRequest) GetCreditNoteType() CreditNoteType {
	if o == nil {
		var ret CreditNoteType
		return ret
	}

	return o.CreditNoteType
}

// GetCreditNoteTypeOk returns a tuple with the CreditNoteType field value
// and a boolean to check if the value has been set.
func (o *CreditNoteRequest) GetCreditNoteTypeOk() (*CreditNoteType, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CreditNoteType, true
}

// SetCreditNoteType sets field value
func (o *CreditNoteRequest) SetCreditNoteType(v CreditNoteType) {
	o.CreditNoteType = v
}

// GetDocumentDateTime returns the DocumentDateTime field value
func (o *CreditNoteRequest) GetDocumentDateTime() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.DocumentDateTime
}

// GetDocumentDateTimeOk returns a tuple with the DocumentDateTime field value
// and a boolean to check if the value has been set.
func (o *CreditNoteRequest) GetDocumentDateTimeOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.DocumentDateTime, true
}

// SetDocumentDateTime sets field value
func (o *CreditNoteRequest) SetDocumentDateTime(v time.Time) {
	o.DocumentDateTime = v
}

// GetTaxDateTime returns the TaxDateTime field value if set, zero value otherwise.
func (o *CreditNoteRequest) GetTaxDateTime() time.Time {
	if o == nil || IsNil(o.TaxDateTime) {
		var ret time.Time
		return ret
	}
	return *o.TaxDateTime
}

// GetTaxDateTimeOk returns a tuple with the TaxDateTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreditNoteRequest) GetTaxDateTimeOk() (*time.Time, bool) {
	if o == nil || IsNil(o.TaxDateTime) {
		return nil, false
	}
	return o.TaxDateTime, true
}

// HasTaxDateTime returns a boolean if a field has been set.
func (o *CreditNoteRequest) HasTaxDateTime() bool {
	if o != nil && !IsNil(o.TaxDateTime) {
		return true
	}

	return false
}

// SetTaxDateTime gets a reference to the given time.Time and assigns it to the TaxDateTime field.
func (o *CreditNoteRequest) SetTaxDateTime(v time.Time) {
	o.TaxDateTime = &v
}

// GetCurrency returns the Currency field value
func (o *CreditNoteRequest) GetCurrency() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Currency
}

// GetCurrencyOk returns a tuple with the Currency field value
// and a boolean to check if the value has been set.
func (o *CreditNoteRequest) GetCurrencyOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Currency, true
}

// SetCurrency sets field value
func (o *CreditNoteRequest) SetCurrency(v string) {
	o.Currency = v
}

// GetSeller returns the Seller field value
func (o *CreditNoteRequest) GetSeller() Seller {
	if o == nil {
		var ret Seller
		return ret
	}

	return o.Seller
}

// GetSellerOk returns a tuple with the Seller field value
// and a boolean to check if the value has been set.
func (o *CreditNoteRequest) GetSellerOk() (*Seller, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Seller, true
}

// SetSeller sets field value
func (o *CreditNoteRequest) SetSeller(v Seller) {
	o.Seller = v
}

// GetCustomer returns the Customer field value
func (o *CreditNoteRequest) GetCustomer() Customer {
	if o == nil {
		var ret Customer
		return ret
	}

	return o.Customer
}

// GetCustomerOk returns a tuple with the Customer field value
// and a boolean to check if the value has been set.
func (o *CreditNoteRequest) GetCustomerOk() (*Customer, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Customer, true
}

// SetCustomer sets field value
func (o *CreditNoteRequest) SetCustomer(v Customer) {
	o.Customer = v
}

// GetTotal returns the Total field value
func (o *CreditNoteRequest) GetTotal() float64 {
	if o == nil {
		var ret float64
		return ret
	}

	return o.Total
}

// GetTotalOk returns a tuple with the Total field value
// and a boolean to check if the value has been set.
func (o *CreditNoteRequest) GetTotalOk() (*float64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Total, true
}

// SetTotal sets field value
func (o *CreditNoteRequest) SetTotal(v float64) {
	o.Total = v
}

// GetExemptAmount returns the ExemptAmount field value
func (o *CreditNoteRequest) GetExemptAmount() float64 {
	if o == nil {
		var ret float64
		return ret
	}

	return o.ExemptAmount
}

// GetExemptAmountOk returns a tuple with the ExemptAmount field value
// and a boolean to check if the value has been set.
func (o *CreditNoteRequest) GetExemptAmountOk() (*float64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ExemptAmount, true
}

// SetExemptAmount sets field value
func (o *CreditNoteRequest) SetExemptAmount(v float64) {
	o.ExemptAmount = v
}

// GetDiscountAmount returns the DiscountAmount field value
func (o *CreditNoteRequest) GetDiscountAmount() float64 {
	if o == nil {
		var ret float64
		return ret
	}

	return o.DiscountAmount
}

// GetDiscountAmountOk returns a tuple with the DiscountAmount field value
// and a boolean to check if the value has been set.
func (o *CreditNoteRequest) GetDiscountAmountOk() (*float64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.DiscountAmount, true
}

// SetDiscountAmount sets field value
func (o *CreditNoteRequest) SetDiscountAmount(v float64) {
	o.DiscountAmount = v
}

// GetTaxableAmount returns the TaxableAmount field value
func (o *CreditNoteRequest) GetTaxableAmount() float64 {
	if o == nil {
		var ret float64
		return ret
	}

	return o.TaxableAmount
}

// GetTaxableAmountOk returns a tuple with the TaxableAmount field value
// and a boolean to check if the value has been set.
func (o *CreditNoteRequest) GetTaxableAmountOk() (*float64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.TaxableAmount, true
}

// SetTaxableAmount sets field value
func (o *CreditNoteRequest) SetTaxableAmount(v float64) {
	o.TaxableAmount = v
}

// GetTaxAmount returns the TaxAmount field value
func (o *CreditNoteRequest) GetTaxAmount() float64 {
	if o == nil {
		var ret float64
		return ret
	}

	return o.TaxAmount
}

// GetTaxAmountOk returns a tuple with the TaxAmount field value
// and a boolean to check if the value has been set.
func (o *CreditNoteRequest) GetTaxAmountOk() (*float64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.TaxAmount, true
}

// SetTaxAmount sets field value
func (o *CreditNoteRequest) SetTaxAmount(v float64) {
	o.TaxAmount = v
}

// GetRoundingAmount returns the RoundingAmount field value if set, zero value otherwise.
func (o *CreditNoteRequest) GetRoundingAmount() float64 {
	if o == nil || IsNil(o.RoundingAmount) {
		var ret float64
		return ret
	}
	return *o.RoundingAmount
}

// GetRoundingAmountOk returns a tuple with the RoundingAmount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreditNoteRequest) GetRoundingAmountOk() (*float64, bool) {
	if o == nil || IsNil(o.RoundingAmount) {
		return nil, false
	}
	return o.RoundingAmount, true
}

// HasRoundingAmount returns a boolean if a field has been set.
func (o *CreditNoteRequest) HasRoundingAmount() bool {
	if o != nil && !IsNil(o.RoundingAmount) {
		return true
	}

	return false
}

// SetRoundingAmount gets a reference to the given float64 and assigns it to the RoundingAmount field.
func (o *CreditNoteRequest) SetRoundingAmount(v float64) {
	o.RoundingAmount = &v
}

// GetLineItems returns the LineItems field value if set, zero value otherwise.
func (o *CreditNoteRequest) GetLineItems() []InvoiceLineItem {
	if o == nil || IsNil(o.LineItems) {
		var ret []InvoiceLineItem
		return ret
	}
	return o.LineItems
}

// GetLineItemsOk returns a tuple with the LineItems field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreditNoteRequest) GetLineItemsOk() ([]InvoiceLineItem, bool) {
	if o == nil || IsNil(o.LineItems) {
		return nil, false
	}
	return o.LineItems, true
}

// HasLineItems returns a boolean if a field has been set.
func (o *CreditNoteRequest) HasLineItems() bool {
	if o != nil && !IsNil(o.LineItems) {
		return true
	}

	return false
}

// SetLineItems gets a reference to the given []InvoiceLineItem and assigns it to the LineItems field.
func (o *CreditNoteRequest) SetLineItems(v []InvoiceLineItem) {
	o.LineItems = v
}

func (o CreditNoteRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CreditNoteRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["creditNoteCode"] = o.CreditNoteCode
	if !IsNil(o.InvoiceCode) {
		toSerialize["invoiceCode"] = o.InvoiceCode
	}
	if !IsNil(o.InvoiceId) {
		toSerialize["invoiceId"] = o.InvoiceId
	}
	toSerialize["creditNoteType"] = o.CreditNoteType
	toSerialize["documentDateTime"] = o.DocumentDateTime
	if !IsNil(o.TaxDateTime) {
		toSerialize["taxDateTime"] = o.TaxDateTime
	}
	toSerialize["currency"] = o.Currency
	toSerialize["seller"] = o.Seller
	toSerialize["customer"] = o.Customer
	toSerialize["total"] = o.Total
	toSerialize["exemptAmount"] = o.ExemptAmount
	toSerialize["discountAmount"] = o.DiscountAmount
	toSerialize["taxableAmount"] = o.TaxableAmount
	toSerialize["taxAmount"] = o.TaxAmount
	if !IsNil(o.RoundingAmount) {
		toSerialize["roundingAmount"] = o.RoundingAmount
	}
	if !IsNil(o.LineItems) {
		toSerialize["lineItems"] = o.LineItems
	}
	return toSerialize, nil
}

func (o *CreditNoteRequest) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"creditNoteCode",
		"creditNoteType",
		"documentDateTime",
		"currency",
		"seller",
		"customer",
		"total",
		"exemptAmount",
		"discountAmount",
		"taxableAmount",
		"taxAmount",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varCreditNoteRequest := _CreditNoteRequest{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varCreditNoteRequest)

	if err != nil {
		return err
	}

	*o = CreditNoteRequest(varCreditNoteRequest)

	return err
}

type NullableCreditNoteRequest struct {
	value *CreditNoteRequest
	isSet bool
}

func (v NullableCreditNoteRequest) Get() *CreditNoteRequest {
	return v.value
}

func (v *NullableCreditNoteRequest) Set(val *CreditNoteRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableCreditNoteRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableCreditNoteRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCreditNoteRequest(val *CreditNoteRequest) *NullableCreditNoteRequest {
	return &NullableCreditNoteRequest{value: val, isSet: true}
}

func (v NullableCreditNoteRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCreditNoteRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


