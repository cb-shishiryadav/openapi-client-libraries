from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model import Model
from openapi_server.models.address import Address
from openapi_server.models.customer_location_evidence import CustomerLocationEvidence
from openapi_server.models.field_item import FieldItem
from openapi_server import util

from openapi_server.models.address import Address  # noqa: E501
from openapi_server.models.customer_location_evidence import CustomerLocationEvidence  # noqa: E501
from openapi_server.models.field_item import FieldItem  # noqa: E501

class Customer(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, name=None, customer_code=None, address=None, tax_registration_number=None, tax_identifiers=None, has_nexus=None, location_evidence=None):  # noqa: E501
        """Customer - a model defined in OpenAPI

        :param name: The name of this Customer.  # noqa: E501
        :type name: str
        :param customer_code: The customer_code of this Customer.  # noqa: E501
        :type customer_code: str
        :param address: The address of this Customer.  # noqa: E501
        :type address: Address
        :param tax_registration_number: The tax_registration_number of this Customer.  # noqa: E501
        :type tax_registration_number: str
        :param tax_identifiers: The tax_identifiers of this Customer.  # noqa: E501
        :type tax_identifiers: List[FieldItem]
        :param has_nexus: The has_nexus of this Customer.  # noqa: E501
        :type has_nexus: bool
        :param location_evidence: The location_evidence of this Customer.  # noqa: E501
        :type location_evidence: CustomerLocationEvidence
        """
        self.openapi_types = {
            'name': str,
            'customer_code': str,
            'address': Address,
            'tax_registration_number': str,
            'tax_identifiers': List[FieldItem],
            'has_nexus': bool,
            'location_evidence': CustomerLocationEvidence
        }

        self.attribute_map = {
            'name': 'name',
            'customer_code': 'customerCode',
            'address': 'address',
            'tax_registration_number': 'taxRegistrationNumber',
            'tax_identifiers': 'taxIdentifiers',
            'has_nexus': 'hasNexus',
            'location_evidence': 'locationEvidence'
        }

        self._name = name
        self._customer_code = customer_code
        self._address = address
        self._tax_registration_number = tax_registration_number
        self._tax_identifiers = tax_identifiers
        self._has_nexus = has_nexus
        self._location_evidence = location_evidence

    @classmethod
    def from_dict(cls, dikt) -> 'Customer':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Customer of this Customer.  # noqa: E501
        :rtype: Customer
        """
        return util.deserialize_model(dikt, cls)

    @property
    def name(self) -> str:
        """Gets the name of this Customer.

        The name of the Customer in Chargebee.  # noqa: E501

        :return: The name of this Customer.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name: str):
        """Sets the name of this Customer.

        The name of the Customer in Chargebee.  # noqa: E501

        :param name: The name of this Customer.
        :type name: str
        """
        if name is not None and len(name) > 50:
            raise ValueError("Invalid value for `name`, length must be less than or equal to `50`")  # noqa: E501

        self._name = name

    @property
    def customer_code(self) -> str:
        """Gets the customer_code of this Customer.

        The unique identifier for the Customer in Chargebee.  # noqa: E501

        :return: The customer_code of this Customer.
        :rtype: str
        """
        return self._customer_code

    @customer_code.setter
    def customer_code(self, customer_code: str):
        """Sets the customer_code of this Customer.

        The unique identifier for the Customer in Chargebee.  # noqa: E501

        :param customer_code: The customer_code of this Customer.
        :type customer_code: str
        """
        if customer_code is None:
            raise ValueError("Invalid value for `customer_code`, must not be `None`")  # noqa: E501
        if customer_code is not None and len(customer_code) > 50:
            raise ValueError("Invalid value for `customer_code`, length must be less than or equal to `50`")  # noqa: E501

        self._customer_code = customer_code

    @property
    def address(self) -> Address:
        """Gets the address of this Customer.


        :return: The address of this Customer.
        :rtype: Address
        """
        return self._address

    @address.setter
    def address(self, address: Address):
        """Sets the address of this Customer.


        :param address: The address of this Customer.
        :type address: Address
        """
        if address is None:
            raise ValueError("Invalid value for `address`, must not be `None`")  # noqa: E501

        self._address = address

    @property
    def tax_registration_number(self) -> str:
        """Gets the tax_registration_number of this Customer.

        The tax registration number of a business in a country. For example, this is the GSTIN for India or the VAT number for EU or Australia.  # noqa: E501

        :return: The tax_registration_number of this Customer.
        :rtype: str
        """
        return self._tax_registration_number

    @tax_registration_number.setter
    def tax_registration_number(self, tax_registration_number: str):
        """Sets the tax_registration_number of this Customer.

        The tax registration number of a business in a country. For example, this is the GSTIN for India or the VAT number for EU or Australia.  # noqa: E501

        :param tax_registration_number: The tax_registration_number of this Customer.
        :type tax_registration_number: str
        """
        if tax_registration_number is not None and len(tax_registration_number) > 30:
            raise ValueError("Invalid value for `tax_registration_number`, length must be less than or equal to `30`")  # noqa: E501

        self._tax_registration_number = tax_registration_number

    @property
    def tax_identifiers(self) -> List[FieldItem]:
        """Gets the tax_identifiers of this Customer.

        It represents the information related to the customer's tax identifiers. This includes details such as exemption status etc.  # noqa: E501

        :return: The tax_identifiers of this Customer.
        :rtype: List[FieldItem]
        """
        return self._tax_identifiers

    @tax_identifiers.setter
    def tax_identifiers(self, tax_identifiers: List[FieldItem]):
        """Sets the tax_identifiers of this Customer.

        It represents the information related to the customer's tax identifiers. This includes details such as exemption status etc.  # noqa: E501

        :param tax_identifiers: The tax_identifiers of this Customer.
        :type tax_identifiers: List[FieldItem]
        """
        if tax_identifiers is not None and len(tax_identifiers) > 10:
            raise ValueError("Invalid value for `tax_identifiers`, number of items must be less than or equal to `10`")  # noqa: E501

        self._tax_identifiers = tax_identifiers

    @property
    def has_nexus(self) -> bool:
        """Gets the has_nexus of this Customer.

        Determines whether a tax nexus exists between the Seller and the tax authority at the address provided.  # noqa: E501

        :return: The has_nexus of this Customer.
        :rtype: bool
        """
        return self._has_nexus

    @has_nexus.setter
    def has_nexus(self, has_nexus: bool):
        """Sets the has_nexus of this Customer.

        Determines whether a tax nexus exists between the Seller and the tax authority at the address provided.  # noqa: E501

        :param has_nexus: The has_nexus of this Customer.
        :type has_nexus: bool
        """

        self._has_nexus = has_nexus

    @property
    def location_evidence(self) -> CustomerLocationEvidence:
        """Gets the location_evidence of this Customer.


        :return: The location_evidence of this Customer.
        :rtype: CustomerLocationEvidence
        """
        return self._location_evidence

    @location_evidence.setter
    def location_evidence(self, location_evidence: CustomerLocationEvidence):
        """Sets the location_evidence of this Customer.


        :param location_evidence: The location_evidence of this Customer.
        :type location_evidence: CustomerLocationEvidence
        """

        self._location_evidence = location_evidence
