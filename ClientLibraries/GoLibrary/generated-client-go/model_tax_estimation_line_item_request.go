/*
Taxes Service Adapter SPI

## Overview Tax Service Adapter is a Service Provider Interface (SPI) that helps Chargebee communicate with API platforms providing the following services: - Address validation - Estimating taxes for sales - Submitting invoices for tax filing  If you have an API that provides the services mentioned above and want Chargebee to be able to integrate with it, you can build an adapter service according to this specification.  ## Terminology Here's a list of terms we've used to describe this specification. ### Merchant    Chargebee’s customer who is carrying out the business of selling products. Also known as the Seller. The Seller has one or more Chargebee accounts. ### Chargebee   The SaaS which manages subscriptions and revenue operations on behalf of the Merchant. Chargebee makes API calls to the Tax Service Adapter for tax estimation and tax filing of transactions between the Merchant and the Customer. ### Customer  Merchant’s customer who purchases products from the Merchant. Their customer record(s) and other details are stored within Chargebee under the Merchant’s account. ### Tax Authority The institution, usually a government, that is responsible for collecting taxes for commercial transactions between Merchants and their Customers.   ### Tax Service Provider The service which provides tax estimation and tax filing services for merchants. ### Tax Service Adapter  The SPI for which the spec is defined in this document. This adapter serves the following purposes: - Translates API requests (as defined in this document) from Chargebee to the request format specified by the Tax Service Provider's API. - Translates API responses from the Tax Service Provider APIs to the format understood by Chargebee (as defined in this document). ### Authorization Chargebee uses HTTP header-based authorization for all the API endpoints associated with Tax Service Adapter. We dynamically pass this authorization key in the HTTP header. The parameter that holds this key is found in the JSON object `api_configuration` required for configuring your onboarding on Chargebee's marketplace. In the `api_configuration` object, our [Taxes Service Adapter SPI](https://chargebee.atlassian.net/l/cp/ca5aZ1mA) checks the authorization key parameter from `credential_configuration.id` and creates the HTTP header-based input query parameter for authorization. The `credential_configuration` is an array of objects with an `id` attribute, and the value of `id` is the parameter containing the authorization key.    Following are the JSON snippets for your reference.     ```json       \"api_configuration\": {           \"api_base_url\": \"https://xyz.abc.com/chargebee\",           \"credential_configuration\": [              {               \"id\":\"authorization_key\",               \"name\": \"Authorization Key\",                \"type\": \"text\",               \"is_sensitive\": true              },             {               \"id\": \"client_secret\",               \"name\": \"Client Secret\",               \"type\": \"text\",               \"is_sensitive\": true             }           ]         }    ```     `\"Authorization\":\"{\"<authorization_key>\":\"test_GykCvTykZFTBqHQAFzjMN9R1Thgdho0Q\"}\"` 

API version: 0.3.7
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the TaxEstimationLineItemRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &TaxEstimationLineItemRequest{}

// TaxEstimationLineItemRequest Represents the details of a line item in a tax estimation request.
type TaxEstimationLineItemRequest struct {
	// Index or serial number of the line item.
	Number int32 `json:"number"`
	// The unique identifier (in Chargebee) of the product corresponding to the line item. If the line item corresponds to a one-off charge, then this identifier is not provided.
	ItemCode *string `json:"itemCode,omitempty"`
	// The description of the line item.
	Description *string `json:"description,omitempty"`
	// The quantity associated with this line item.
	Quantity *float64 `json:"quantity,omitempty"`
	// The unit price for this line item. In case of [tiered pricing](https://www.chargebee.com/docs/1.0/plans.html#tiered-pricing) where the unit price varies for each quantity tier, this is the average unit price.
	UnitPrice *float64 `json:"unitPrice,omitempty"`
	// The amount for this line item. This is `unitPrice` × `quantity`.
	Amount float64 `json:"amount"`
	// The discount applied to this line item.
	DiscountAmount *float64 `json:"discountAmount,omitempty"`
	// Indicates whether (`amount` - `discountAmount`)  is inclusive of taxes.
	IsTaxInclusive bool `json:"isTaxInclusive"`
	// The tax code fields of the product used for tax calculation.
	TaxIdentifiers []FieldItem `json:"taxIdentifiers,omitempty"`
}

type _TaxEstimationLineItemRequest TaxEstimationLineItemRequest

// NewTaxEstimationLineItemRequest instantiates a new TaxEstimationLineItemRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTaxEstimationLineItemRequest(number int32, amount float64, isTaxInclusive bool) *TaxEstimationLineItemRequest {
	this := TaxEstimationLineItemRequest{}
	this.Number = number
	this.Amount = amount
	this.IsTaxInclusive = isTaxInclusive
	return &this
}

// NewTaxEstimationLineItemRequestWithDefaults instantiates a new TaxEstimationLineItemRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTaxEstimationLineItemRequestWithDefaults() *TaxEstimationLineItemRequest {
	this := TaxEstimationLineItemRequest{}
	return &this
}

// GetNumber returns the Number field value
func (o *TaxEstimationLineItemRequest) GetNumber() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Number
}

// GetNumberOk returns a tuple with the Number field value
// and a boolean to check if the value has been set.
func (o *TaxEstimationLineItemRequest) GetNumberOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Number, true
}

// SetNumber sets field value
func (o *TaxEstimationLineItemRequest) SetNumber(v int32) {
	o.Number = v
}

// GetItemCode returns the ItemCode field value if set, zero value otherwise.
func (o *TaxEstimationLineItemRequest) GetItemCode() string {
	if o == nil || IsNil(o.ItemCode) {
		var ret string
		return ret
	}
	return *o.ItemCode
}

// GetItemCodeOk returns a tuple with the ItemCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TaxEstimationLineItemRequest) GetItemCodeOk() (*string, bool) {
	if o == nil || IsNil(o.ItemCode) {
		return nil, false
	}
	return o.ItemCode, true
}

// HasItemCode returns a boolean if a field has been set.
func (o *TaxEstimationLineItemRequest) HasItemCode() bool {
	if o != nil && !IsNil(o.ItemCode) {
		return true
	}

	return false
}

// SetItemCode gets a reference to the given string and assigns it to the ItemCode field.
func (o *TaxEstimationLineItemRequest) SetItemCode(v string) {
	o.ItemCode = &v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *TaxEstimationLineItemRequest) GetDescription() string {
	if o == nil || IsNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TaxEstimationLineItemRequest) GetDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *TaxEstimationLineItemRequest) HasDescription() bool {
	if o != nil && !IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *TaxEstimationLineItemRequest) SetDescription(v string) {
	o.Description = &v
}

// GetQuantity returns the Quantity field value if set, zero value otherwise.
func (o *TaxEstimationLineItemRequest) GetQuantity() float64 {
	if o == nil || IsNil(o.Quantity) {
		var ret float64
		return ret
	}
	return *o.Quantity
}

// GetQuantityOk returns a tuple with the Quantity field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TaxEstimationLineItemRequest) GetQuantityOk() (*float64, bool) {
	if o == nil || IsNil(o.Quantity) {
		return nil, false
	}
	return o.Quantity, true
}

// HasQuantity returns a boolean if a field has been set.
func (o *TaxEstimationLineItemRequest) HasQuantity() bool {
	if o != nil && !IsNil(o.Quantity) {
		return true
	}

	return false
}

// SetQuantity gets a reference to the given float64 and assigns it to the Quantity field.
func (o *TaxEstimationLineItemRequest) SetQuantity(v float64) {
	o.Quantity = &v
}

// GetUnitPrice returns the UnitPrice field value if set, zero value otherwise.
func (o *TaxEstimationLineItemRequest) GetUnitPrice() float64 {
	if o == nil || IsNil(o.UnitPrice) {
		var ret float64
		return ret
	}
	return *o.UnitPrice
}

// GetUnitPriceOk returns a tuple with the UnitPrice field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TaxEstimationLineItemRequest) GetUnitPriceOk() (*float64, bool) {
	if o == nil || IsNil(o.UnitPrice) {
		return nil, false
	}
	return o.UnitPrice, true
}

// HasUnitPrice returns a boolean if a field has been set.
func (o *TaxEstimationLineItemRequest) HasUnitPrice() bool {
	if o != nil && !IsNil(o.UnitPrice) {
		return true
	}

	return false
}

// SetUnitPrice gets a reference to the given float64 and assigns it to the UnitPrice field.
func (o *TaxEstimationLineItemRequest) SetUnitPrice(v float64) {
	o.UnitPrice = &v
}

// GetAmount returns the Amount field value
func (o *TaxEstimationLineItemRequest) GetAmount() float64 {
	if o == nil {
		var ret float64
		return ret
	}

	return o.Amount
}

// GetAmountOk returns a tuple with the Amount field value
// and a boolean to check if the value has been set.
func (o *TaxEstimationLineItemRequest) GetAmountOk() (*float64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Amount, true
}

// SetAmount sets field value
func (o *TaxEstimationLineItemRequest) SetAmount(v float64) {
	o.Amount = v
}

// GetDiscountAmount returns the DiscountAmount field value if set, zero value otherwise.
func (o *TaxEstimationLineItemRequest) GetDiscountAmount() float64 {
	if o == nil || IsNil(o.DiscountAmount) {
		var ret float64
		return ret
	}
	return *o.DiscountAmount
}

// GetDiscountAmountOk returns a tuple with the DiscountAmount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TaxEstimationLineItemRequest) GetDiscountAmountOk() (*float64, bool) {
	if o == nil || IsNil(o.DiscountAmount) {
		return nil, false
	}
	return o.DiscountAmount, true
}

// HasDiscountAmount returns a boolean if a field has been set.
func (o *TaxEstimationLineItemRequest) HasDiscountAmount() bool {
	if o != nil && !IsNil(o.DiscountAmount) {
		return true
	}

	return false
}

// SetDiscountAmount gets a reference to the given float64 and assigns it to the DiscountAmount field.
func (o *TaxEstimationLineItemRequest) SetDiscountAmount(v float64) {
	o.DiscountAmount = &v
}

// GetIsTaxInclusive returns the IsTaxInclusive field value
func (o *TaxEstimationLineItemRequest) GetIsTaxInclusive() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.IsTaxInclusive
}

// GetIsTaxInclusiveOk returns a tuple with the IsTaxInclusive field value
// and a boolean to check if the value has been set.
func (o *TaxEstimationLineItemRequest) GetIsTaxInclusiveOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.IsTaxInclusive, true
}

// SetIsTaxInclusive sets field value
func (o *TaxEstimationLineItemRequest) SetIsTaxInclusive(v bool) {
	o.IsTaxInclusive = v
}

// GetTaxIdentifiers returns the TaxIdentifiers field value if set, zero value otherwise.
func (o *TaxEstimationLineItemRequest) GetTaxIdentifiers() []FieldItem {
	if o == nil || IsNil(o.TaxIdentifiers) {
		var ret []FieldItem
		return ret
	}
	return o.TaxIdentifiers
}

// GetTaxIdentifiersOk returns a tuple with the TaxIdentifiers field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TaxEstimationLineItemRequest) GetTaxIdentifiersOk() ([]FieldItem, bool) {
	if o == nil || IsNil(o.TaxIdentifiers) {
		return nil, false
	}
	return o.TaxIdentifiers, true
}

// HasTaxIdentifiers returns a boolean if a field has been set.
func (o *TaxEstimationLineItemRequest) HasTaxIdentifiers() bool {
	if o != nil && !IsNil(o.TaxIdentifiers) {
		return true
	}

	return false
}

// SetTaxIdentifiers gets a reference to the given []FieldItem and assigns it to the TaxIdentifiers field.
func (o *TaxEstimationLineItemRequest) SetTaxIdentifiers(v []FieldItem) {
	o.TaxIdentifiers = v
}

func (o TaxEstimationLineItemRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o TaxEstimationLineItemRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["number"] = o.Number
	if !IsNil(o.ItemCode) {
		toSerialize["itemCode"] = o.ItemCode
	}
	if !IsNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	if !IsNil(o.Quantity) {
		toSerialize["quantity"] = o.Quantity
	}
	if !IsNil(o.UnitPrice) {
		toSerialize["unitPrice"] = o.UnitPrice
	}
	toSerialize["amount"] = o.Amount
	if !IsNil(o.DiscountAmount) {
		toSerialize["discountAmount"] = o.DiscountAmount
	}
	toSerialize["isTaxInclusive"] = o.IsTaxInclusive
	if !IsNil(o.TaxIdentifiers) {
		toSerialize["taxIdentifiers"] = o.TaxIdentifiers
	}
	return toSerialize, nil
}

func (o *TaxEstimationLineItemRequest) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"number",
		"amount",
		"isTaxInclusive",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varTaxEstimationLineItemRequest := _TaxEstimationLineItemRequest{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varTaxEstimationLineItemRequest)

	if err != nil {
		return err
	}

	*o = TaxEstimationLineItemRequest(varTaxEstimationLineItemRequest)

	return err
}

type NullableTaxEstimationLineItemRequest struct {
	value *TaxEstimationLineItemRequest
	isSet bool
}

func (v NullableTaxEstimationLineItemRequest) Get() *TaxEstimationLineItemRequest {
	return v.value
}

func (v *NullableTaxEstimationLineItemRequest) Set(val *TaxEstimationLineItemRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableTaxEstimationLineItemRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableTaxEstimationLineItemRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTaxEstimationLineItemRequest(val *TaxEstimationLineItemRequest) *NullableTaxEstimationLineItemRequest {
	return &NullableTaxEstimationLineItemRequest{value: val, isSet: true}
}

func (v NullableTaxEstimationLineItemRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTaxEstimationLineItemRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


