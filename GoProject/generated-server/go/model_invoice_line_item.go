// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

/*
 * Taxes Service Adapter SPI
 *
 * ## Overview Tax Service Adapter is a Service Provider Interface (SPI) that helps Chargebee communicate with API platforms providing the following services: - Address validation - Estimating taxes for sales - Submitting invoices for tax filing  If you have an API that provides the services mentioned above and want Chargebee to be able to integrate with it, you can build an adapter service according to this specification.  ## Terminology Here's a list of terms we've used to describe this specification. ### Merchant    Chargebee’s customer who is carrying out the business of selling products. Also known as the Seller. The Seller has one or more Chargebee accounts. ### Chargebee   The SaaS which manages subscriptions and revenue operations on behalf of the Merchant. Chargebee makes API calls to the Tax Service Adapter for tax estimation and tax filing of transactions between the Merchant and the Customer. ### Customer  Merchant’s customer who purchases products from the Merchant. Their customer record(s) and other details are stored within Chargebee under the Merchant’s account. ### Tax Authority The institution, usually a government, that is responsible for collecting taxes for commercial transactions between Merchants and their Customers.   ### Tax Service Provider The service which provides tax estimation and tax filing services for merchants. ### Tax Service Adapter  The SPI for which the spec is defined in this document. This adapter serves the following purposes: - Translates API requests (as defined in this document) from Chargebee to the request format specified by the Tax Service Provider's API. - Translates API responses from the Tax Service Provider APIs to the format understood by Chargebee (as defined in this document). ### Authorization Chargebee uses HTTP header-based authorization for all the API endpoints associated with Tax Service Adapter. We dynamically pass this authorization key in the HTTP header. The parameter that holds this key is found in the JSON object `api_configuration` required for configuring your onboarding on Chargebee's marketplace. In the `api_configuration` object, our [Taxes Service Adapter SPI](https://chargebee.atlassian.net/l/cp/ca5aZ1mA) checks the authorization key parameter from `credential_configuration.id` and creates the HTTP header-based input query parameter for authorization. The `credential_configuration` is an array of objects with an `id` attribute, and the value of `id` is the parameter containing the authorization key.    Following are the JSON snippets for your reference.     ```json       \"api_configuration\": {           \"api_base_url\": \"https://xyz.abc.com/chargebee\",           \"credential_configuration\": [              {               \"id\":\"authorization_key\",               \"name\": \"Authorization Key\",                \"type\": \"text\",               \"is_sensitive\": true              },             {               \"id\": \"client_secret\",               \"name\": \"Client Secret\",               \"type\": \"text\",               \"is_sensitive\": true             }           ]         }    ```     `\"Authorization\":\"{\"<authorization_key>\":\"test_GykCvTykZFTBqHQAFzjMN9R1Thgdho0Q\"}\"` 
 *
 * API version: 0.3.7
 */

package openapi


import (
	"errors"
)



// InvoiceLineItem - The details of a line item.
type InvoiceLineItem struct {

	// Index or serial number of the line item.
	Number int32 `json:"number"`

	// The unique identifier (in Chargebee) of the product corresponding to the line item. If the line item corresponds to a one-off charge, then this identifier is not present.
	ItemCode string `json:"itemCode,omitempty"`

	// The description of the line item.
	Description string `json:"description,omitempty"`

	// The quantity associated with this line item.
	Quantity float64 `json:"quantity,omitempty"`

	// The unit price for this line item. In case of [tiered pricing](https://www.chargebee.com/docs/1.0/plans.html#tiered-pricing) where the unit price varies for each quantity tier, this is the average unit price.
	UnitPrice float64 `json:"unitPrice,omitempty"`

	// The amount for this line item. This is `unitPrice` × `quantity`.
	Amount float64 `json:"amount"`

	// The amount after discounts for this line item. This is `amount` - `discountAmount`.
	Subtotal float64 `json:"subtotal"`

	// Indicates whether the `subtotal` for this line item is inclusive of taxes.
	IsTaxInclusive bool `json:"isTaxInclusive"`

	// Indicates whether this line item is taxable.
	IsTaxable bool `json:"isTaxable"`

	// The tax code fields of the product used for tax calculation.
	TaxIdentifiers []FieldItem `json:"taxIdentifiers,omitempty"`

	TaxExemptType TaxExemptType `json:"taxExemptType,omitempty"`

	// The reason due to which a line item is exempted from tax. This is a mandatory parameter while applying tax exemption on any line-item.
	TaxExemptReason string `json:"taxExemptReason,omitempty"`

	// The part of this line item's `subtotal` that is exempted from tax.
	ExemptAmount float64 `json:"exemptAmount"`

	// The discount applied to this line item.
	DiscountAmount float64 `json:"discountAmount"`

	// The part of this line item's `subtotal` that is taxable.
	TaxableAmount float64 `json:"taxableAmount"`

	// The tax payable for this line item. This is the sum of all `taxes.taxAmount` for this line item.
	TaxAmount float64 `json:"taxAmount"`

	// The total for this line item after discounts and taxes. This is the same as `subtotal` if it is tax inclusive; otherwise it is `subtotal` + `taxAmount`. `total` can also be expressed as `exemptAmount` + `taxableAmount` + `taxAmount`.
	Total float64 `json:"total"`

	// Indicates if taxes were applied only partially for this line item.
	IsPartialTax bool `json:"isPartialTax,omitempty"`

	// List of taxes applied for this line item under each jurisdiction.
	Taxes []TaxLineItem `json:"taxes"`
}

// AssertInvoiceLineItemRequired checks if the required fields are not zero-ed
func AssertInvoiceLineItemRequired(obj InvoiceLineItem) error {
	elements := map[string]interface{}{
		"number": obj.Number,
		"amount": obj.Amount,
		"subtotal": obj.Subtotal,
		"isTaxInclusive": obj.IsTaxInclusive,
		"isTaxable": obj.IsTaxable,
		"exemptAmount": obj.ExemptAmount,
		"discountAmount": obj.DiscountAmount,
		"taxableAmount": obj.TaxableAmount,
		"taxAmount": obj.TaxAmount,
		"total": obj.Total,
		"taxes": obj.Taxes,
	}
	for name, el := range elements {
		if isZero := IsZeroValue(el); isZero {
			return &RequiredError{Field: name}
		}
	}

	for _, el := range obj.TaxIdentifiers {
		if err := AssertFieldItemRequired(el); err != nil {
			return err
		}
	}
	for _, el := range obj.Taxes {
		if err := AssertTaxLineItemRequired(el); err != nil {
			return err
		}
	}
	return nil
}

// AssertInvoiceLineItemConstraints checks if the values respects the defined constraints
func AssertInvoiceLineItemConstraints(obj InvoiceLineItem) error {
	if obj.Number < 1 {
		return &ParsingError{Param: "Number", Err: errors.New(errMsgMinValueConstraint)}
	}
	if obj.Quantity < 0 {
		return &ParsingError{Param: "Quantity", Err: errors.New(errMsgMinValueConstraint)}
	}
	if obj.UnitPrice < 0 {
		return &ParsingError{Param: "UnitPrice", Err: errors.New(errMsgMinValueConstraint)}
	}
	for _, el := range obj.TaxIdentifiers {
		if err := AssertFieldItemConstraints(el); err != nil {
			return err
		}
	}
	for _, el := range obj.Taxes {
		if err := AssertTaxLineItemConstraints(el); err != nil {
			return err
		}
	}
	return nil
}
