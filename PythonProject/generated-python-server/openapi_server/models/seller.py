from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model import Model
from openapi_server.models.address import Address
from openapi_server import util

from openapi_server.models.address import Address  # noqa: E501

class Seller(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, tax_registration_number=None, address=None, has_nexus=None):  # noqa: E501
        """Seller - a model defined in OpenAPI

        :param tax_registration_number: The tax_registration_number of this Seller.  # noqa: E501
        :type tax_registration_number: str
        :param address: The address of this Seller.  # noqa: E501
        :type address: Address
        :param has_nexus: The has_nexus of this Seller.  # noqa: E501
        :type has_nexus: bool
        """
        self.openapi_types = {
            'tax_registration_number': str,
            'address': Address,
            'has_nexus': bool
        }

        self.attribute_map = {
            'tax_registration_number': 'taxRegistrationNumber',
            'address': 'address',
            'has_nexus': 'hasNexus'
        }

        self._tax_registration_number = tax_registration_number
        self._address = address
        self._has_nexus = has_nexus

    @classmethod
    def from_dict(cls, dikt) -> 'Seller':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Seller of this Seller.  # noqa: E501
        :rtype: Seller
        """
        return util.deserialize_model(dikt, cls)

    @property
    def tax_registration_number(self) -> str:
        """Gets the tax_registration_number of this Seller.

        The tax registration number of a business in a country. For example, this is the GSTIN for India or the VAT number for EU or Australia.  # noqa: E501

        :return: The tax_registration_number of this Seller.
        :rtype: str
        """
        return self._tax_registration_number

    @tax_registration_number.setter
    def tax_registration_number(self, tax_registration_number: str):
        """Sets the tax_registration_number of this Seller.

        The tax registration number of a business in a country. For example, this is the GSTIN for India or the VAT number for EU or Australia.  # noqa: E501

        :param tax_registration_number: The tax_registration_number of this Seller.
        :type tax_registration_number: str
        """
        if tax_registration_number is not None and len(tax_registration_number) > 30:
            raise ValueError("Invalid value for `tax_registration_number`, length must be less than or equal to `30`")  # noqa: E501

        self._tax_registration_number = tax_registration_number

    @property
    def address(self) -> Address:
        """Gets the address of this Seller.


        :return: The address of this Seller.
        :rtype: Address
        """
        return self._address

    @address.setter
    def address(self, address: Address):
        """Sets the address of this Seller.


        :param address: The address of this Seller.
        :type address: Address
        """
        if address is None:
            raise ValueError("Invalid value for `address`, must not be `None`")  # noqa: E501

        self._address = address

    @property
    def has_nexus(self) -> bool:
        """Gets the has_nexus of this Seller.

        Determines whether a tax nexus exists between the Seller and the tax authority at the address provided.  # noqa: E501

        :return: The has_nexus of this Seller.
        :rtype: bool
        """
        return self._has_nexus

    @has_nexus.setter
    def has_nexus(self, has_nexus: bool):
        """Sets the has_nexus of this Seller.

        Determines whether a tax nexus exists between the Seller and the tax authority at the address provided.  # noqa: E501

        :param has_nexus: The has_nexus of this Seller.
        :type has_nexus: bool
        """

        self._has_nexus = has_nexus
