/*
Taxes Service Adapter SPI

## Overview Tax Service Adapter is a Service Provider Interface (SPI) that helps Chargebee communicate with API platforms providing the following services: - Address validation - Estimating taxes for sales - Submitting invoices for tax filing  If you have an API that provides the services mentioned above and want Chargebee to be able to integrate with it, you can build an adapter service according to this specification.  ## Terminology Here's a list of terms we've used to describe this specification. ### Merchant    Chargebee’s customer who is carrying out the business of selling products. Also known as the Seller. The Seller has one or more Chargebee accounts. ### Chargebee   The SaaS which manages subscriptions and revenue operations on behalf of the Merchant. Chargebee makes API calls to the Tax Service Adapter for tax estimation and tax filing of transactions between the Merchant and the Customer. ### Customer  Merchant’s customer who purchases products from the Merchant. Their customer record(s) and other details are stored within Chargebee under the Merchant’s account. ### Tax Authority The institution, usually a government, that is responsible for collecting taxes for commercial transactions between Merchants and their Customers.   ### Tax Service Provider The service which provides tax estimation and tax filing services for merchants. ### Tax Service Adapter  The SPI for which the spec is defined in this document. This adapter serves the following purposes: - Translates API requests (as defined in this document) from Chargebee to the request format specified by the Tax Service Provider's API. - Translates API responses from the Tax Service Provider APIs to the format understood by Chargebee (as defined in this document). ### Authorization Chargebee uses HTTP header-based authorization for all the API endpoints associated with Tax Service Adapter. We dynamically pass this authorization key in the HTTP header. The parameter that holds this key is found in the JSON object `api_configuration` required for configuring your onboarding on Chargebee's marketplace. In the `api_configuration` object, our [Taxes Service Adapter SPI](https://chargebee.atlassian.net/l/cp/ca5aZ1mA) checks the authorization key parameter from `credential_configuration.id` and creates the HTTP header-based input query parameter for authorization. The `credential_configuration` is an array of objects with an `id` attribute, and the value of `id` is the parameter containing the authorization key.    Following are the JSON snippets for your reference.     ```json       \"api_configuration\": {           \"api_base_url\": \"https://xyz.abc.com/chargebee\",           \"credential_configuration\": [              {               \"id\":\"authorization_key\",               \"name\": \"Authorization Key\",                \"type\": \"text\",               \"is_sensitive\": true              },             {               \"id\": \"client_secret\",               \"name\": \"Client Secret\",               \"type\": \"text\",               \"is_sensitive\": true             }           ]         }    ```     `\"Authorization\":\"{\"<authorization_key>\":\"test_GykCvTykZFTBqHQAFzjMN9R1Thgdho0Q\"}\"` 

API version: 0.3.7
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the Customer type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Customer{}

// Customer The details of the Customer.
type Customer struct {
	// The name of the Customer in Chargebee.
	Name *string `json:"name,omitempty"`
	// The unique identifier for the Customer in Chargebee.
	CustomerCode string `json:"customerCode"`
	Address Address `json:"address"`
	// The tax registration number of a business in a country. For example, this is the GSTIN for India or the VAT number for EU or Australia.
	TaxRegistrationNumber NullableString `json:"taxRegistrationNumber,omitempty"`
	// It represents the information related to the customer's tax identifiers. This includes details such as exemption status etc.
	TaxIdentifiers []FieldItem `json:"taxIdentifiers,omitempty"`
	// Determines whether a tax nexus exists between the Seller and the tax authority at the address provided.
	HasNexus *bool `json:"hasNexus,omitempty"`
	LocationEvidence *CustomerLocationEvidence `json:"locationEvidence,omitempty"`
}

type _Customer Customer

// NewCustomer instantiates a new Customer object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCustomer(customerCode string, address Address) *Customer {
	this := Customer{}
	this.CustomerCode = customerCode
	this.Address = address
	return &this
}

// NewCustomerWithDefaults instantiates a new Customer object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCustomerWithDefaults() *Customer {
	this := Customer{}
	return &this
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *Customer) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Customer) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *Customer) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *Customer) SetName(v string) {
	o.Name = &v
}

// GetCustomerCode returns the CustomerCode field value
func (o *Customer) GetCustomerCode() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.CustomerCode
}

// GetCustomerCodeOk returns a tuple with the CustomerCode field value
// and a boolean to check if the value has been set.
func (o *Customer) GetCustomerCodeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CustomerCode, true
}

// SetCustomerCode sets field value
func (o *Customer) SetCustomerCode(v string) {
	o.CustomerCode = v
}

// GetAddress returns the Address field value
func (o *Customer) GetAddress() Address {
	if o == nil {
		var ret Address
		return ret
	}

	return o.Address
}

// GetAddressOk returns a tuple with the Address field value
// and a boolean to check if the value has been set.
func (o *Customer) GetAddressOk() (*Address, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Address, true
}

// SetAddress sets field value
func (o *Customer) SetAddress(v Address) {
	o.Address = v
}

// GetTaxRegistrationNumber returns the TaxRegistrationNumber field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Customer) GetTaxRegistrationNumber() string {
	if o == nil || IsNil(o.TaxRegistrationNumber.Get()) {
		var ret string
		return ret
	}
	return *o.TaxRegistrationNumber.Get()
}

// GetTaxRegistrationNumberOk returns a tuple with the TaxRegistrationNumber field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Customer) GetTaxRegistrationNumberOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.TaxRegistrationNumber.Get(), o.TaxRegistrationNumber.IsSet()
}

// HasTaxRegistrationNumber returns a boolean if a field has been set.
func (o *Customer) HasTaxRegistrationNumber() bool {
	if o != nil && o.TaxRegistrationNumber.IsSet() {
		return true
	}

	return false
}

// SetTaxRegistrationNumber gets a reference to the given NullableString and assigns it to the TaxRegistrationNumber field.
func (o *Customer) SetTaxRegistrationNumber(v string) {
	o.TaxRegistrationNumber.Set(&v)
}
// SetTaxRegistrationNumberNil sets the value for TaxRegistrationNumber to be an explicit nil
func (o *Customer) SetTaxRegistrationNumberNil() {
	o.TaxRegistrationNumber.Set(nil)
}

// UnsetTaxRegistrationNumber ensures that no value is present for TaxRegistrationNumber, not even an explicit nil
func (o *Customer) UnsetTaxRegistrationNumber() {
	o.TaxRegistrationNumber.Unset()
}

// GetTaxIdentifiers returns the TaxIdentifiers field value if set, zero value otherwise.
func (o *Customer) GetTaxIdentifiers() []FieldItem {
	if o == nil || IsNil(o.TaxIdentifiers) {
		var ret []FieldItem
		return ret
	}
	return o.TaxIdentifiers
}

// GetTaxIdentifiersOk returns a tuple with the TaxIdentifiers field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Customer) GetTaxIdentifiersOk() ([]FieldItem, bool) {
	if o == nil || IsNil(o.TaxIdentifiers) {
		return nil, false
	}
	return o.TaxIdentifiers, true
}

// HasTaxIdentifiers returns a boolean if a field has been set.
func (o *Customer) HasTaxIdentifiers() bool {
	if o != nil && !IsNil(o.TaxIdentifiers) {
		return true
	}

	return false
}

// SetTaxIdentifiers gets a reference to the given []FieldItem and assigns it to the TaxIdentifiers field.
func (o *Customer) SetTaxIdentifiers(v []FieldItem) {
	o.TaxIdentifiers = v
}

// GetHasNexus returns the HasNexus field value if set, zero value otherwise.
func (o *Customer) GetHasNexus() bool {
	if o == nil || IsNil(o.HasNexus) {
		var ret bool
		return ret
	}
	return *o.HasNexus
}

// GetHasNexusOk returns a tuple with the HasNexus field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Customer) GetHasNexusOk() (*bool, bool) {
	if o == nil || IsNil(o.HasNexus) {
		return nil, false
	}
	return o.HasNexus, true
}

// HasHasNexus returns a boolean if a field has been set.
func (o *Customer) HasHasNexus() bool {
	if o != nil && !IsNil(o.HasNexus) {
		return true
	}

	return false
}

// SetHasNexus gets a reference to the given bool and assigns it to the HasNexus field.
func (o *Customer) SetHasNexus(v bool) {
	o.HasNexus = &v
}

// GetLocationEvidence returns the LocationEvidence field value if set, zero value otherwise.
func (o *Customer) GetLocationEvidence() CustomerLocationEvidence {
	if o == nil || IsNil(o.LocationEvidence) {
		var ret CustomerLocationEvidence
		return ret
	}
	return *o.LocationEvidence
}

// GetLocationEvidenceOk returns a tuple with the LocationEvidence field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Customer) GetLocationEvidenceOk() (*CustomerLocationEvidence, bool) {
	if o == nil || IsNil(o.LocationEvidence) {
		return nil, false
	}
	return o.LocationEvidence, true
}

// HasLocationEvidence returns a boolean if a field has been set.
func (o *Customer) HasLocationEvidence() bool {
	if o != nil && !IsNil(o.LocationEvidence) {
		return true
	}

	return false
}

// SetLocationEvidence gets a reference to the given CustomerLocationEvidence and assigns it to the LocationEvidence field.
func (o *Customer) SetLocationEvidence(v CustomerLocationEvidence) {
	o.LocationEvidence = &v
}

func (o Customer) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Customer) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	toSerialize["customerCode"] = o.CustomerCode
	toSerialize["address"] = o.Address
	if o.TaxRegistrationNumber.IsSet() {
		toSerialize["taxRegistrationNumber"] = o.TaxRegistrationNumber.Get()
	}
	if !IsNil(o.TaxIdentifiers) {
		toSerialize["taxIdentifiers"] = o.TaxIdentifiers
	}
	if !IsNil(o.HasNexus) {
		toSerialize["hasNexus"] = o.HasNexus
	}
	if !IsNil(o.LocationEvidence) {
		toSerialize["locationEvidence"] = o.LocationEvidence
	}
	return toSerialize, nil
}

func (o *Customer) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"customerCode",
		"address",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varCustomer := _Customer{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varCustomer)

	if err != nil {
		return err
	}

	*o = Customer(varCustomer)

	return err
}

type NullableCustomer struct {
	value *Customer
	isSet bool
}

func (v NullableCustomer) Get() *Customer {
	return v.value
}

func (v *NullableCustomer) Set(val *Customer) {
	v.value = val
	v.isSet = true
}

func (v NullableCustomer) IsSet() bool {
	return v.isSet
}

func (v *NullableCustomer) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCustomer(val *Customer) *NullableCustomer {
	return &NullableCustomer{value: val, isSet: true}
}

func (v NullableCustomer) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCustomer) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


