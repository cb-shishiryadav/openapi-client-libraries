/*
Taxes Service Adapter SPI

## Overview Tax Service Adapter is a Service Provider Interface (SPI) that helps Chargebee communicate with API platforms providing the following services: - Address validation - Estimating taxes for sales - Submitting invoices for tax filing  If you have an API that provides the services mentioned above and want Chargebee to be able to integrate with it, you can build an adapter service according to this specification.  ## Terminology Here's a list of terms we've used to describe this specification. ### Merchant    Chargebee’s customer who is carrying out the business of selling products. Also known as the Seller. The Seller has one or more Chargebee accounts. ### Chargebee   The SaaS which manages subscriptions and revenue operations on behalf of the Merchant. Chargebee makes API calls to the Tax Service Adapter for tax estimation and tax filing of transactions between the Merchant and the Customer. ### Customer  Merchant’s customer who purchases products from the Merchant. Their customer record(s) and other details are stored within Chargebee under the Merchant’s account. ### Tax Authority The institution, usually a government, that is responsible for collecting taxes for commercial transactions between Merchants and their Customers.   ### Tax Service Provider The service which provides tax estimation and tax filing services for merchants. ### Tax Service Adapter  The SPI for which the spec is defined in this document. This adapter serves the following purposes: - Translates API requests (as defined in this document) from Chargebee to the request format specified by the Tax Service Provider's API. - Translates API responses from the Tax Service Provider APIs to the format understood by Chargebee (as defined in this document). ### Authorization Chargebee uses HTTP header-based authorization for all the API endpoints associated with Tax Service Adapter. We dynamically pass this authorization key in the HTTP header. The parameter that holds this key is found in the JSON object `api_configuration` required for configuring your onboarding on Chargebee's marketplace. In the `api_configuration` object, our [Taxes Service Adapter SPI](https://chargebee.atlassian.net/l/cp/ca5aZ1mA) checks the authorization key parameter from `credential_configuration.id` and creates the HTTP header-based input query parameter for authorization. The `credential_configuration` is an array of objects with an `id` attribute, and the value of `id` is the parameter containing the authorization key.    Following are the JSON snippets for your reference.     ```json       \"api_configuration\": {           \"api_base_url\": \"https://xyz.abc.com/chargebee\",           \"credential_configuration\": [              {               \"id\":\"authorization_key\",               \"name\": \"Authorization Key\",                \"type\": \"text\",               \"is_sensitive\": true              },             {               \"id\": \"client_secret\",               \"name\": \"Client Secret\",               \"type\": \"text\",               \"is_sensitive\": true             }           ]         }    ```     `\"Authorization\":\"{\"<authorization_key>\":\"test_GykCvTykZFTBqHQAFzjMN9R1Thgdho0Q\"}\"` 

API version: 0.3.7
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the ValidationErrorResponseErrorsInner type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ValidationErrorResponseErrorsInner{}

// ValidationErrorResponseErrorsInner struct for ValidationErrorResponseErrorsInner
type ValidationErrorResponseErrorsInner struct {
	// The target entity that has the invalid field or value.
	Entity *string `json:"entity,omitempty"`
	// The field of an entity that has the invalid value.
	EntityField *string `json:"entityField,omitempty"`
	Code ErrorCode `json:"code"`
	// A short message describing the reason for the error.
	Message string `json:"message"`
	// The link to the documentation for more information about the error and the corrective action.
	HelpUrl *string `json:"helpUrl,omitempty"`
}

type _ValidationErrorResponseErrorsInner ValidationErrorResponseErrorsInner

// NewValidationErrorResponseErrorsInner instantiates a new ValidationErrorResponseErrorsInner object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewValidationErrorResponseErrorsInner(code ErrorCode, message string) *ValidationErrorResponseErrorsInner {
	this := ValidationErrorResponseErrorsInner{}
	this.Code = code
	this.Message = message
	return &this
}

// NewValidationErrorResponseErrorsInnerWithDefaults instantiates a new ValidationErrorResponseErrorsInner object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewValidationErrorResponseErrorsInnerWithDefaults() *ValidationErrorResponseErrorsInner {
	this := ValidationErrorResponseErrorsInner{}
	return &this
}

// GetEntity returns the Entity field value if set, zero value otherwise.
func (o *ValidationErrorResponseErrorsInner) GetEntity() string {
	if o == nil || IsNil(o.Entity) {
		var ret string
		return ret
	}
	return *o.Entity
}

// GetEntityOk returns a tuple with the Entity field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ValidationErrorResponseErrorsInner) GetEntityOk() (*string, bool) {
	if o == nil || IsNil(o.Entity) {
		return nil, false
	}
	return o.Entity, true
}

// HasEntity returns a boolean if a field has been set.
func (o *ValidationErrorResponseErrorsInner) HasEntity() bool {
	if o != nil && !IsNil(o.Entity) {
		return true
	}

	return false
}

// SetEntity gets a reference to the given string and assigns it to the Entity field.
func (o *ValidationErrorResponseErrorsInner) SetEntity(v string) {
	o.Entity = &v
}

// GetEntityField returns the EntityField field value if set, zero value otherwise.
func (o *ValidationErrorResponseErrorsInner) GetEntityField() string {
	if o == nil || IsNil(o.EntityField) {
		var ret string
		return ret
	}
	return *o.EntityField
}

// GetEntityFieldOk returns a tuple with the EntityField field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ValidationErrorResponseErrorsInner) GetEntityFieldOk() (*string, bool) {
	if o == nil || IsNil(o.EntityField) {
		return nil, false
	}
	return o.EntityField, true
}

// HasEntityField returns a boolean if a field has been set.
func (o *ValidationErrorResponseErrorsInner) HasEntityField() bool {
	if o != nil && !IsNil(o.EntityField) {
		return true
	}

	return false
}

// SetEntityField gets a reference to the given string and assigns it to the EntityField field.
func (o *ValidationErrorResponseErrorsInner) SetEntityField(v string) {
	o.EntityField = &v
}

// GetCode returns the Code field value
func (o *ValidationErrorResponseErrorsInner) GetCode() ErrorCode {
	if o == nil {
		var ret ErrorCode
		return ret
	}

	return o.Code
}

// GetCodeOk returns a tuple with the Code field value
// and a boolean to check if the value has been set.
func (o *ValidationErrorResponseErrorsInner) GetCodeOk() (*ErrorCode, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Code, true
}

// SetCode sets field value
func (o *ValidationErrorResponseErrorsInner) SetCode(v ErrorCode) {
	o.Code = v
}

// GetMessage returns the Message field value
func (o *ValidationErrorResponseErrorsInner) GetMessage() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Message
}

// GetMessageOk returns a tuple with the Message field value
// and a boolean to check if the value has been set.
func (o *ValidationErrorResponseErrorsInner) GetMessageOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Message, true
}

// SetMessage sets field value
func (o *ValidationErrorResponseErrorsInner) SetMessage(v string) {
	o.Message = v
}

// GetHelpUrl returns the HelpUrl field value if set, zero value otherwise.
func (o *ValidationErrorResponseErrorsInner) GetHelpUrl() string {
	if o == nil || IsNil(o.HelpUrl) {
		var ret string
		return ret
	}
	return *o.HelpUrl
}

// GetHelpUrlOk returns a tuple with the HelpUrl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ValidationErrorResponseErrorsInner) GetHelpUrlOk() (*string, bool) {
	if o == nil || IsNil(o.HelpUrl) {
		return nil, false
	}
	return o.HelpUrl, true
}

// HasHelpUrl returns a boolean if a field has been set.
func (o *ValidationErrorResponseErrorsInner) HasHelpUrl() bool {
	if o != nil && !IsNil(o.HelpUrl) {
		return true
	}

	return false
}

// SetHelpUrl gets a reference to the given string and assigns it to the HelpUrl field.
func (o *ValidationErrorResponseErrorsInner) SetHelpUrl(v string) {
	o.HelpUrl = &v
}

func (o ValidationErrorResponseErrorsInner) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ValidationErrorResponseErrorsInner) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Entity) {
		toSerialize["entity"] = o.Entity
	}
	if !IsNil(o.EntityField) {
		toSerialize["entityField"] = o.EntityField
	}
	toSerialize["code"] = o.Code
	toSerialize["message"] = o.Message
	if !IsNil(o.HelpUrl) {
		toSerialize["helpUrl"] = o.HelpUrl
	}
	return toSerialize, nil
}

func (o *ValidationErrorResponseErrorsInner) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"code",
		"message",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varValidationErrorResponseErrorsInner := _ValidationErrorResponseErrorsInner{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varValidationErrorResponseErrorsInner)

	if err != nil {
		return err
	}

	*o = ValidationErrorResponseErrorsInner(varValidationErrorResponseErrorsInner)

	return err
}

type NullableValidationErrorResponseErrorsInner struct {
	value *ValidationErrorResponseErrorsInner
	isSet bool
}

func (v NullableValidationErrorResponseErrorsInner) Get() *ValidationErrorResponseErrorsInner {
	return v.value
}

func (v *NullableValidationErrorResponseErrorsInner) Set(val *ValidationErrorResponseErrorsInner) {
	v.value = val
	v.isSet = true
}

func (v NullableValidationErrorResponseErrorsInner) IsSet() bool {
	return v.isSet
}

func (v *NullableValidationErrorResponseErrorsInner) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableValidationErrorResponseErrorsInner(val *ValidationErrorResponseErrorsInner) *NullableValidationErrorResponseErrorsInner {
	return &NullableValidationErrorResponseErrorsInner{value: val, isSet: true}
}

func (v NullableValidationErrorResponseErrorsInner) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableValidationErrorResponseErrorsInner) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


