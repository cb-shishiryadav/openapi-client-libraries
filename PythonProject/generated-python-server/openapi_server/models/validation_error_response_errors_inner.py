from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model import Model
from openapi_server.models.error_code import ErrorCode
from openapi_server import util

from openapi_server.models.error_code import ErrorCode  # noqa: E501

class ValidationErrorResponseErrorsInner(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, entity=None, entity_field=None, code=None, message=None, help_url=None):  # noqa: E501
        """ValidationErrorResponseErrorsInner - a model defined in OpenAPI

        :param entity: The entity of this ValidationErrorResponseErrorsInner.  # noqa: E501
        :type entity: str
        :param entity_field: The entity_field of this ValidationErrorResponseErrorsInner.  # noqa: E501
        :type entity_field: str
        :param code: The code of this ValidationErrorResponseErrorsInner.  # noqa: E501
        :type code: ErrorCode
        :param message: The message of this ValidationErrorResponseErrorsInner.  # noqa: E501
        :type message: str
        :param help_url: The help_url of this ValidationErrorResponseErrorsInner.  # noqa: E501
        :type help_url: str
        """
        self.openapi_types = {
            'entity': str,
            'entity_field': str,
            'code': ErrorCode,
            'message': str,
            'help_url': str
        }

        self.attribute_map = {
            'entity': 'entity',
            'entity_field': 'entityField',
            'code': 'code',
            'message': 'message',
            'help_url': 'helpUrl'
        }

        self._entity = entity
        self._entity_field = entity_field
        self._code = code
        self._message = message
        self._help_url = help_url

    @classmethod
    def from_dict(cls, dikt) -> 'ValidationErrorResponseErrorsInner':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The ValidationErrorResponse_errors_inner of this ValidationErrorResponseErrorsInner.  # noqa: E501
        :rtype: ValidationErrorResponseErrorsInner
        """
        return util.deserialize_model(dikt, cls)

    @property
    def entity(self) -> str:
        """Gets the entity of this ValidationErrorResponseErrorsInner.

        The target entity that has the invalid field or value.  # noqa: E501

        :return: The entity of this ValidationErrorResponseErrorsInner.
        :rtype: str
        """
        return self._entity

    @entity.setter
    def entity(self, entity: str):
        """Sets the entity of this ValidationErrorResponseErrorsInner.

        The target entity that has the invalid field or value.  # noqa: E501

        :param entity: The entity of this ValidationErrorResponseErrorsInner.
        :type entity: str
        """
        if entity is not None and len(entity) > 20:
            raise ValueError("Invalid value for `entity`, length must be less than or equal to `20`")  # noqa: E501

        self._entity = entity

    @property
    def entity_field(self) -> str:
        """Gets the entity_field of this ValidationErrorResponseErrorsInner.

        The field of an entity that has the invalid value.  # noqa: E501

        :return: The entity_field of this ValidationErrorResponseErrorsInner.
        :rtype: str
        """
        return self._entity_field

    @entity_field.setter
    def entity_field(self, entity_field: str):
        """Sets the entity_field of this ValidationErrorResponseErrorsInner.

        The field of an entity that has the invalid value.  # noqa: E501

        :param entity_field: The entity_field of this ValidationErrorResponseErrorsInner.
        :type entity_field: str
        """
        if entity_field is not None and len(entity_field) > 250:
            raise ValueError("Invalid value for `entity_field`, length must be less than or equal to `250`")  # noqa: E501

        self._entity_field = entity_field

    @property
    def code(self) -> ErrorCode:
        """Gets the code of this ValidationErrorResponseErrorsInner.


        :return: The code of this ValidationErrorResponseErrorsInner.
        :rtype: ErrorCode
        """
        return self._code

    @code.setter
    def code(self, code: ErrorCode):
        """Sets the code of this ValidationErrorResponseErrorsInner.


        :param code: The code of this ValidationErrorResponseErrorsInner.
        :type code: ErrorCode
        """
        if code is None:
            raise ValueError("Invalid value for `code`, must not be `None`")  # noqa: E501

        self._code = code

    @property
    def message(self) -> str:
        """Gets the message of this ValidationErrorResponseErrorsInner.

        A short message describing the reason for the error.  # noqa: E501

        :return: The message of this ValidationErrorResponseErrorsInner.
        :rtype: str
        """
        return self._message

    @message.setter
    def message(self, message: str):
        """Sets the message of this ValidationErrorResponseErrorsInner.

        A short message describing the reason for the error.  # noqa: E501

        :param message: The message of this ValidationErrorResponseErrorsInner.
        :type message: str
        """
        if message is None:
            raise ValueError("Invalid value for `message`, must not be `None`")  # noqa: E501
        if message is not None and len(message) > 250:
            raise ValueError("Invalid value for `message`, length must be less than or equal to `250`")  # noqa: E501

        self._message = message

    @property
    def help_url(self) -> str:
        """Gets the help_url of this ValidationErrorResponseErrorsInner.

        The link to the documentation for more information about the error and the corrective action.  # noqa: E501

        :return: The help_url of this ValidationErrorResponseErrorsInner.
        :rtype: str
        """
        return self._help_url

    @help_url.setter
    def help_url(self, help_url: str):
        """Sets the help_url of this ValidationErrorResponseErrorsInner.

        The link to the documentation for more information about the error and the corrective action.  # noqa: E501

        :param help_url: The help_url of this ValidationErrorResponseErrorsInner.
        :type help_url: str
        """

        self._help_url = help_url
