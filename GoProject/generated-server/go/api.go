// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

/*
 * Taxes Service Adapter SPI
 *
 * ## Overview Tax Service Adapter is a Service Provider Interface (SPI) that helps Chargebee communicate with API platforms providing the following services: - Address validation - Estimating taxes for sales - Submitting invoices for tax filing  If you have an API that provides the services mentioned above and want Chargebee to be able to integrate with it, you can build an adapter service according to this specification.  ## Terminology Here's a list of terms we've used to describe this specification. ### Merchant    Chargebee’s customer who is carrying out the business of selling products. Also known as the Seller. The Seller has one or more Chargebee accounts. ### Chargebee   The SaaS which manages subscriptions and revenue operations on behalf of the Merchant. Chargebee makes API calls to the Tax Service Adapter for tax estimation and tax filing of transactions between the Merchant and the Customer. ### Customer  Merchant’s customer who purchases products from the Merchant. Their customer record(s) and other details are stored within Chargebee under the Merchant’s account. ### Tax Authority The institution, usually a government, that is responsible for collecting taxes for commercial transactions between Merchants and their Customers.   ### Tax Service Provider The service which provides tax estimation and tax filing services for merchants. ### Tax Service Adapter  The SPI for which the spec is defined in this document. This adapter serves the following purposes: - Translates API requests (as defined in this document) from Chargebee to the request format specified by the Tax Service Provider's API. - Translates API responses from the Tax Service Provider APIs to the format understood by Chargebee (as defined in this document). ### Authorization Chargebee uses HTTP header-based authorization for all the API endpoints associated with Tax Service Adapter. We dynamically pass this authorization key in the HTTP header. The parameter that holds this key is found in the JSON object `api_configuration` required for configuring your onboarding on Chargebee's marketplace. In the `api_configuration` object, our [Taxes Service Adapter SPI](https://chargebee.atlassian.net/l/cp/ca5aZ1mA) checks the authorization key parameter from `credential_configuration.id` and creates the HTTP header-based input query parameter for authorization. The `credential_configuration` is an array of objects with an `id` attribute, and the value of `id` is the parameter containing the authorization key.    Following are the JSON snippets for your reference.     ```json       \"api_configuration\": {           \"api_base_url\": \"https://xyz.abc.com/chargebee\",           \"credential_configuration\": [              {               \"id\":\"authorization_key\",               \"name\": \"Authorization Key\",                \"type\": \"text\",               \"is_sensitive\": true              },             {               \"id\": \"client_secret\",               \"name\": \"Client Secret\",               \"type\": \"text\",               \"is_sensitive\": true             }           ]         }    ```     `\"Authorization\":\"{\"<authorization_key>\":\"test_GykCvTykZFTBqHQAFzjMN9R1Thgdho0Q\"}\"` 
 *
 * API version: 0.3.7
 */

package openapi

import (
	"context"
	"net/http"
)



// AddressAPIRouter defines the required methods for binding the api requests to a responses for the AddressAPI
// The AddressAPIRouter implementation should parse necessary information from the http request,
// pass the data to a AddressAPIServicer to perform the required actions, then write the service results to the http response.
type AddressAPIRouter interface { 
	CheckAddressTaxability(http.ResponseWriter, *http.Request)
	ValidateAddress(http.ResponseWriter, *http.Request)
}
// AuthenticationAPIRouter defines the required methods for binding the api requests to a responses for the AuthenticationAPI
// The AuthenticationAPIRouter implementation should parse necessary information from the http request,
// pass the data to a AuthenticationAPIServicer to perform the required actions, then write the service results to the http response.
type AuthenticationAPIRouter interface { 
	ValidateCredentials(http.ResponseWriter, *http.Request)
}
// CreditNoteAPIRouter defines the required methods for binding the api requests to a responses for the CreditNoteAPI
// The CreditNoteAPIRouter implementation should parse necessary information from the http request,
// pass the data to a CreditNoteAPIServicer to perform the required actions, then write the service results to the http response.
type CreditNoteAPIRouter interface { 
	CommitCreditNote(http.ResponseWriter, *http.Request)
	CreateCreditNote(http.ResponseWriter, *http.Request)
	FetchCreditNote(http.ResponseWriter, *http.Request)
	VoidCreditNote(http.ResponseWriter, *http.Request)
}
// HealthAPIRouter defines the required methods for binding the api requests to a responses for the HealthAPI
// The HealthAPIRouter implementation should parse necessary information from the http request,
// pass the data to a HealthAPIServicer to perform the required actions, then write the service results to the http response.
type HealthAPIRouter interface { 
	FetchHealth(http.ResponseWriter, *http.Request)
}
// InvoiceAPIRouter defines the required methods for binding the api requests to a responses for the InvoiceAPI
// The InvoiceAPIRouter implementation should parse necessary information from the http request,
// pass the data to a InvoiceAPIServicer to perform the required actions, then write the service results to the http response.
type InvoiceAPIRouter interface { 
	CommitInvoice(http.ResponseWriter, *http.Request)
	CreateInvoice(http.ResponseWriter, *http.Request)
	FetchInvoice(http.ResponseWriter, *http.Request)
	VoidInvoice(http.ResponseWriter, *http.Request)
}
// TaxEstimateAPIRouter defines the required methods for binding the api requests to a responses for the TaxEstimateAPI
// The TaxEstimateAPIRouter implementation should parse necessary information from the http request,
// pass the data to a TaxEstimateAPIServicer to perform the required actions, then write the service results to the http response.
type TaxEstimateAPIRouter interface { 
	EstimateTaxes(http.ResponseWriter, *http.Request)
}


// AddressAPIServicer defines the api actions for the AddressAPI service
// This interface intended to stay up to date with the openapi yaml used to generate it,
// while the service implementation can be ignored with the .openapi-generator-ignore file
// and updated with the logic required for the API.
type AddressAPIServicer interface { 
	CheckAddressTaxability(context.Context, CheckAddressTaxabilityRequest) (ImplResponse, error)
	ValidateAddress(context.Context, AddressValidationRequest) (ImplResponse, error)
}


// AuthenticationAPIServicer defines the api actions for the AuthenticationAPI service
// This interface intended to stay up to date with the openapi yaml used to generate it,
// while the service implementation can be ignored with the .openapi-generator-ignore file
// and updated with the logic required for the API.
type AuthenticationAPIServicer interface { 
	ValidateCredentials(context.Context) (ImplResponse, error)
}


// CreditNoteAPIServicer defines the api actions for the CreditNoteAPI service
// This interface intended to stay up to date with the openapi yaml used to generate it,
// while the service implementation can be ignored with the .openapi-generator-ignore file
// and updated with the logic required for the API.
type CreditNoteAPIServicer interface { 
	CommitCreditNote(context.Context, string, string) (ImplResponse, error)
	CreateCreditNote(context.Context, CreditNoteRequest) (ImplResponse, error)
	FetchCreditNote(context.Context, string, string) (ImplResponse, error)
	VoidCreditNote(context.Context, string, string) (ImplResponse, error)
}


// HealthAPIServicer defines the api actions for the HealthAPI service
// This interface intended to stay up to date with the openapi yaml used to generate it,
// while the service implementation can be ignored with the .openapi-generator-ignore file
// and updated with the logic required for the API.
type HealthAPIServicer interface { 
	FetchHealth(context.Context) (ImplResponse, error)
}


// InvoiceAPIServicer defines the api actions for the InvoiceAPI service
// This interface intended to stay up to date with the openapi yaml used to generate it,
// while the service implementation can be ignored with the .openapi-generator-ignore file
// and updated with the logic required for the API.
type InvoiceAPIServicer interface { 
	CommitInvoice(context.Context, string) (ImplResponse, error)
	CreateInvoice(context.Context, InvoiceRequest) (ImplResponse, error)
	FetchInvoice(context.Context, string) (ImplResponse, error)
	VoidInvoice(context.Context, string) (ImplResponse, error)
}


// TaxEstimateAPIServicer defines the api actions for the TaxEstimateAPI service
// This interface intended to stay up to date with the openapi yaml used to generate it,
// while the service implementation can be ignored with the .openapi-generator-ignore file
// and updated with the logic required for the API.
type TaxEstimateAPIServicer interface { 
	EstimateTaxes(context.Context, TaxEstimationRequest) (ImplResponse, error)
}
