from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model import Model
from openapi_server.models.tax_jurisdiction import TaxJurisdiction
from openapi_server import util

from openapi_server.models.tax_jurisdiction import TaxJurisdiction  # noqa: E501

class TaxLineItem(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, number=None, jurisdiction=None, name=None, rate=None, taxable_amount=None, tax_amount=None):  # noqa: E501
        """TaxLineItem - a model defined in OpenAPI

        :param number: The number of this TaxLineItem.  # noqa: E501
        :type number: int
        :param jurisdiction: The jurisdiction of this TaxLineItem.  # noqa: E501
        :type jurisdiction: TaxJurisdiction
        :param name: The name of this TaxLineItem.  # noqa: E501
        :type name: str
        :param rate: The rate of this TaxLineItem.  # noqa: E501
        :type rate: float
        :param taxable_amount: The taxable_amount of this TaxLineItem.  # noqa: E501
        :type taxable_amount: float
        :param tax_amount: The tax_amount of this TaxLineItem.  # noqa: E501
        :type tax_amount: float
        """
        self.openapi_types = {
            'number': int,
            'jurisdiction': TaxJurisdiction,
            'name': str,
            'rate': float,
            'taxable_amount': float,
            'tax_amount': float
        }

        self.attribute_map = {
            'number': 'number',
            'jurisdiction': 'jurisdiction',
            'name': 'name',
            'rate': 'rate',
            'taxable_amount': 'taxableAmount',
            'tax_amount': 'taxAmount'
        }

        self._number = number
        self._jurisdiction = jurisdiction
        self._name = name
        self._rate = rate
        self._taxable_amount = taxable_amount
        self._tax_amount = tax_amount

    @classmethod
    def from_dict(cls, dikt) -> 'TaxLineItem':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The TaxLineItem of this TaxLineItem.  # noqa: E501
        :rtype: TaxLineItem
        """
        return util.deserialize_model(dikt, cls)

    @property
    def number(self) -> int:
        """Gets the number of this TaxLineItem.

        Index or serial number of this tax line item.  # noqa: E501

        :return: The number of this TaxLineItem.
        :rtype: int
        """
        return self._number

    @number.setter
    def number(self, number: int):
        """Sets the number of this TaxLineItem.

        Index or serial number of this tax line item.  # noqa: E501

        :param number: The number of this TaxLineItem.
        :type number: int
        """
        if number is None:
            raise ValueError("Invalid value for `number`, must not be `None`")  # noqa: E501
        if number is not None and number < 1:  # noqa: E501
            raise ValueError("Invalid value for `number`, must be a value greater than or equal to `1`")  # noqa: E501

        self._number = number

    @property
    def jurisdiction(self) -> TaxJurisdiction:
        """Gets the jurisdiction of this TaxLineItem.


        :return: The jurisdiction of this TaxLineItem.
        :rtype: TaxJurisdiction
        """
        return self._jurisdiction

    @jurisdiction.setter
    def jurisdiction(self, jurisdiction: TaxJurisdiction):
        """Sets the jurisdiction of this TaxLineItem.


        :param jurisdiction: The jurisdiction of this TaxLineItem.
        :type jurisdiction: TaxJurisdiction
        """
        if jurisdiction is None:
            raise ValueError("Invalid value for `jurisdiction`, must not be `None`")  # noqa: E501

        self._jurisdiction = jurisdiction

    @property
    def name(self) -> str:
        """Gets the name of this TaxLineItem.

        The name of the tax applied.  # noqa: E501

        :return: The name of this TaxLineItem.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name: str):
        """Sets the name of this TaxLineItem.

        The name of the tax applied.  # noqa: E501

        :param name: The name of this TaxLineItem.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def rate(self) -> float:
        """Gets the rate of this TaxLineItem.

        The tax rate expressed in percentage.  # noqa: E501

        :return: The rate of this TaxLineItem.
        :rtype: float
        """
        return self._rate

    @rate.setter
    def rate(self, rate: float):
        """Sets the rate of this TaxLineItem.

        The tax rate expressed in percentage.  # noqa: E501

        :param rate: The rate of this TaxLineItem.
        :type rate: float
        """
        if rate is None:
            raise ValueError("Invalid value for `rate`, must not be `None`")  # noqa: E501
        if rate is not None and rate > 100:  # noqa: E501
            raise ValueError("Invalid value for `rate`, must be a value less than or equal to `100`")  # noqa: E501

        self._rate = rate

    @property
    def taxable_amount(self) -> float:
        """Gets the taxable_amount of this TaxLineItem.

        The part of the line item's `subtotal` that is taxable under this jurisdiction.  # noqa: E501

        :return: The taxable_amount of this TaxLineItem.
        :rtype: float
        """
        return self._taxable_amount

    @taxable_amount.setter
    def taxable_amount(self, taxable_amount: float):
        """Sets the taxable_amount of this TaxLineItem.

        The part of the line item's `subtotal` that is taxable under this jurisdiction.  # noqa: E501

        :param taxable_amount: The taxable_amount of this TaxLineItem.
        :type taxable_amount: float
        """
        if taxable_amount is None:
            raise ValueError("Invalid value for `taxable_amount`, must not be `None`")  # noqa: E501

        self._taxable_amount = taxable_amount

    @property
    def tax_amount(self) -> float:
        """Gets the tax_amount of this TaxLineItem.

        The tax payable for the line item under this jurisdiction.  # noqa: E501

        :return: The tax_amount of this TaxLineItem.
        :rtype: float
        """
        return self._tax_amount

    @tax_amount.setter
    def tax_amount(self, tax_amount: float):
        """Sets the tax_amount of this TaxLineItem.

        The tax payable for the line item under this jurisdiction.  # noqa: E501

        :param tax_amount: The tax_amount of this TaxLineItem.
        :type tax_amount: float
        """
        if tax_amount is None:
            raise ValueError("Invalid value for `tax_amount`, must not be `None`")  # noqa: E501

        self._tax_amount = tax_amount
