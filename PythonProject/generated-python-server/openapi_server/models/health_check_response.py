from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model import Model
from openapi_server.models.health_check_component import HealthCheckComponent
from openapi_server.models.health_status import HealthStatus
from openapi_server import util

from openapi_server.models.health_check_component import HealthCheckComponent  # noqa: E501
from openapi_server.models.health_status import HealthStatus  # noqa: E501

class HealthCheckResponse(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, version=None, description=None, status=None, components=None, time=None):  # noqa: E501
        """HealthCheckResponse - a model defined in OpenAPI

        :param version: The version of this HealthCheckResponse.  # noqa: E501
        :type version: str
        :param description: The description of this HealthCheckResponse.  # noqa: E501
        :type description: str
        :param status: The status of this HealthCheckResponse.  # noqa: E501
        :type status: HealthStatus
        :param components: The components of this HealthCheckResponse.  # noqa: E501
        :type components: List[HealthCheckComponent]
        :param time: The time of this HealthCheckResponse.  # noqa: E501
        :type time: datetime
        """
        self.openapi_types = {
            'version': str,
            'description': str,
            'status': HealthStatus,
            'components': List[HealthCheckComponent],
            'time': datetime
        }

        self.attribute_map = {
            'version': 'version',
            'description': 'description',
            'status': 'status',
            'components': 'components',
            'time': 'time'
        }

        self._version = version
        self._description = description
        self._status = status
        self._components = components
        self._time = time

    @classmethod
    def from_dict(cls, dikt) -> 'HealthCheckResponse':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The HealthCheckResponse of this HealthCheckResponse.  # noqa: E501
        :rtype: HealthCheckResponse
        """
        return util.deserialize_model(dikt, cls)

    @property
    def version(self) -> str:
        """Gets the version of this HealthCheckResponse.


        :return: The version of this HealthCheckResponse.
        :rtype: str
        """
        return self._version

    @version.setter
    def version(self, version: str):
        """Sets the version of this HealthCheckResponse.


        :param version: The version of this HealthCheckResponse.
        :type version: str
        """
        if version is not None and len(version) < 1:
            raise ValueError("Invalid value for `version`, length must be greater than or equal to `1`")  # noqa: E501

        self._version = version

    @property
    def description(self) -> str:
        """Gets the description of this HealthCheckResponse.

        The description of the health status returned by the Service Adapter.  # noqa: E501

        :return: The description of this HealthCheckResponse.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description: str):
        """Sets the description of this HealthCheckResponse.

        The description of the health status returned by the Service Adapter.  # noqa: E501

        :param description: The description of this HealthCheckResponse.
        :type description: str
        """
        if description is not None and len(description) > 250:
            raise ValueError("Invalid value for `description`, length must be less than or equal to `250`")  # noqa: E501

        self._description = description

    @property
    def status(self) -> HealthStatus:
        """Gets the status of this HealthCheckResponse.


        :return: The status of this HealthCheckResponse.
        :rtype: HealthStatus
        """
        return self._status

    @status.setter
    def status(self, status: HealthStatus):
        """Sets the status of this HealthCheckResponse.


        :param status: The status of this HealthCheckResponse.
        :type status: HealthStatus
        """
        if status is None:
            raise ValueError("Invalid value for `status`, must not be `None`")  # noqa: E501

        self._status = status

    @property
    def components(self) -> List[HealthCheckComponent]:
        """Gets the components of this HealthCheckResponse.

        List of health status details for each component reported by the Service Adapter.  # noqa: E501

        :return: The components of this HealthCheckResponse.
        :rtype: List[HealthCheckComponent]
        """
        return self._components

    @components.setter
    def components(self, components: List[HealthCheckComponent]):
        """Sets the components of this HealthCheckResponse.

        List of health status details for each component reported by the Service Adapter.  # noqa: E501

        :param components: The components of this HealthCheckResponse.
        :type components: List[HealthCheckComponent]
        """
        if components is None:
            raise ValueError("Invalid value for `components`, must not be `None`")  # noqa: E501

        self._components = components

    @property
    def time(self) -> datetime:
        """Gets the time of this HealthCheckResponse.

        The timestamp of the health status reported by the Service Adapter.  # noqa: E501

        :return: The time of this HealthCheckResponse.
        :rtype: datetime
        """
        return self._time

    @time.setter
    def time(self, time: datetime):
        """Sets the time of this HealthCheckResponse.

        The timestamp of the health status reported by the Service Adapter.  # noqa: E501

        :param time: The time of this HealthCheckResponse.
        :type time: datetime
        """
        if time is None:
            raise ValueError("Invalid value for `time`, must not be `None`")  # noqa: E501

        self._time = time
