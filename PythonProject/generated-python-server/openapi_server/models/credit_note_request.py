from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model import Model
from openapi_server.models.credit_note_type import CreditNoteType
from openapi_server.models.customer import Customer
from openapi_server.models.invoice_line_item import InvoiceLineItem
from openapi_server.models.seller import Seller
from openapi_server import util

from openapi_server.models.credit_note_type import CreditNoteType  # noqa: E501
from openapi_server.models.customer import Customer  # noqa: E501
from openapi_server.models.invoice_line_item import InvoiceLineItem  # noqa: E501
from openapi_server.models.seller import Seller  # noqa: E501

class CreditNoteRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, credit_note_code=None, invoice_code=None, invoice_id=None, credit_note_type=None, document_date_time=None, tax_date_time=None, currency=None, seller=None, customer=None, total=None, exempt_amount=None, discount_amount=None, taxable_amount=None, tax_amount=None, rounding_amount=None, line_items=None):  # noqa: E501
        """CreditNoteRequest - a model defined in OpenAPI

        :param credit_note_code: The credit_note_code of this CreditNoteRequest.  # noqa: E501
        :type credit_note_code: str
        :param invoice_code: The invoice_code of this CreditNoteRequest.  # noqa: E501
        :type invoice_code: str
        :param invoice_id: The invoice_id of this CreditNoteRequest.  # noqa: E501
        :type invoice_id: str
        :param credit_note_type: The credit_note_type of this CreditNoteRequest.  # noqa: E501
        :type credit_note_type: CreditNoteType
        :param document_date_time: The document_date_time of this CreditNoteRequest.  # noqa: E501
        :type document_date_time: datetime
        :param tax_date_time: The tax_date_time of this CreditNoteRequest.  # noqa: E501
        :type tax_date_time: datetime
        :param currency: The currency of this CreditNoteRequest.  # noqa: E501
        :type currency: str
        :param seller: The seller of this CreditNoteRequest.  # noqa: E501
        :type seller: Seller
        :param customer: The customer of this CreditNoteRequest.  # noqa: E501
        :type customer: Customer
        :param total: The total of this CreditNoteRequest.  # noqa: E501
        :type total: float
        :param exempt_amount: The exempt_amount of this CreditNoteRequest.  # noqa: E501
        :type exempt_amount: float
        :param discount_amount: The discount_amount of this CreditNoteRequest.  # noqa: E501
        :type discount_amount: float
        :param taxable_amount: The taxable_amount of this CreditNoteRequest.  # noqa: E501
        :type taxable_amount: float
        :param tax_amount: The tax_amount of this CreditNoteRequest.  # noqa: E501
        :type tax_amount: float
        :param rounding_amount: The rounding_amount of this CreditNoteRequest.  # noqa: E501
        :type rounding_amount: float
        :param line_items: The line_items of this CreditNoteRequest.  # noqa: E501
        :type line_items: List[InvoiceLineItem]
        """
        self.openapi_types = {
            'credit_note_code': str,
            'invoice_code': str,
            'invoice_id': str,
            'credit_note_type': CreditNoteType,
            'document_date_time': datetime,
            'tax_date_time': datetime,
            'currency': str,
            'seller': Seller,
            'customer': Customer,
            'total': float,
            'exempt_amount': float,
            'discount_amount': float,
            'taxable_amount': float,
            'tax_amount': float,
            'rounding_amount': float,
            'line_items': List[InvoiceLineItem]
        }

        self.attribute_map = {
            'credit_note_code': 'creditNoteCode',
            'invoice_code': 'invoiceCode',
            'invoice_id': 'invoiceId',
            'credit_note_type': 'creditNoteType',
            'document_date_time': 'documentDateTime',
            'tax_date_time': 'taxDateTime',
            'currency': 'currency',
            'seller': 'seller',
            'customer': 'customer',
            'total': 'total',
            'exempt_amount': 'exemptAmount',
            'discount_amount': 'discountAmount',
            'taxable_amount': 'taxableAmount',
            'tax_amount': 'taxAmount',
            'rounding_amount': 'roundingAmount',
            'line_items': 'lineItems'
        }

        self._credit_note_code = credit_note_code
        self._invoice_code = invoice_code
        self._invoice_id = invoice_id
        self._credit_note_type = credit_note_type
        self._document_date_time = document_date_time
        self._tax_date_time = tax_date_time
        self._currency = currency
        self._seller = seller
        self._customer = customer
        self._total = total
        self._exempt_amount = exempt_amount
        self._discount_amount = discount_amount
        self._taxable_amount = taxable_amount
        self._tax_amount = tax_amount
        self._rounding_amount = rounding_amount
        self._line_items = line_items

    @classmethod
    def from_dict(cls, dikt) -> 'CreditNoteRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The CreditNoteRequest of this CreditNoteRequest.  # noqa: E501
        :rtype: CreditNoteRequest
        """
        return util.deserialize_model(dikt, cls)

    @property
    def credit_note_code(self) -> str:
        """Gets the credit_note_code of this CreditNoteRequest.

        The unique identifier of the credit note in Chargebee.  # noqa: E501

        :return: The credit_note_code of this CreditNoteRequest.
        :rtype: str
        """
        return self._credit_note_code

    @credit_note_code.setter
    def credit_note_code(self, credit_note_code: str):
        """Sets the credit_note_code of this CreditNoteRequest.

        The unique identifier of the credit note in Chargebee.  # noqa: E501

        :param credit_note_code: The credit_note_code of this CreditNoteRequest.
        :type credit_note_code: str
        """
        if credit_note_code is None:
            raise ValueError("Invalid value for `credit_note_code`, must not be `None`")  # noqa: E501
        if credit_note_code is not None and len(credit_note_code) > 50:
            raise ValueError("Invalid value for `credit_note_code`, length must be less than or equal to `50`")  # noqa: E501

        self._credit_note_code = credit_note_code

    @property
    def invoice_code(self) -> str:
        """Gets the invoice_code of this CreditNoteRequest.

        The unique identifier of the invoice in Chargebee to which this credit note belongs.  # noqa: E501

        :return: The invoice_code of this CreditNoteRequest.
        :rtype: str
        """
        return self._invoice_code

    @invoice_code.setter
    def invoice_code(self, invoice_code: str):
        """Sets the invoice_code of this CreditNoteRequest.

        The unique identifier of the invoice in Chargebee to which this credit note belongs.  # noqa: E501

        :param invoice_code: The invoice_code of this CreditNoteRequest.
        :type invoice_code: str
        """
        if invoice_code is not None and len(invoice_code) > 50:
            raise ValueError("Invalid value for `invoice_code`, length must be less than or equal to `50`")  # noqa: E501

        self._invoice_code = invoice_code

    @property
    def invoice_id(self) -> str:
        """Gets the invoice_id of this CreditNoteRequest.

        The unique identifier of the invoice in the Tax Service Adapter or the Tax Service Provider.  # noqa: E501

        :return: The invoice_id of this CreditNoteRequest.
        :rtype: str
        """
        return self._invoice_id

    @invoice_id.setter
    def invoice_id(self, invoice_id: str):
        """Sets the invoice_id of this CreditNoteRequest.

        The unique identifier of the invoice in the Tax Service Adapter or the Tax Service Provider.  # noqa: E501

        :param invoice_id: The invoice_id of this CreditNoteRequest.
        :type invoice_id: str
        """

        self._invoice_id = invoice_id

    @property
    def credit_note_type(self) -> CreditNoteType:
        """Gets the credit_note_type of this CreditNoteRequest.


        :return: The credit_note_type of this CreditNoteRequest.
        :rtype: CreditNoteType
        """
        return self._credit_note_type

    @credit_note_type.setter
    def credit_note_type(self, credit_note_type: CreditNoteType):
        """Sets the credit_note_type of this CreditNoteRequest.


        :param credit_note_type: The credit_note_type of this CreditNoteRequest.
        :type credit_note_type: CreditNoteType
        """
        if credit_note_type is None:
            raise ValueError("Invalid value for `credit_note_type`, must not be `None`")  # noqa: E501

        self._credit_note_type = credit_note_type

    @property
    def document_date_time(self) -> datetime:
        """Gets the document_date_time of this CreditNoteRequest.

        The date and time at which the credit note was created in Chargebee. For example, if the value is 2022-10-28T15:36:28.129+05:30, then the timestamp represents October 28, 2022, at 15:36:28.129, with an offset of +05:30. This means that the time represented is 5 hours and 30 minutes ahead of UTC/GMT. In the case of a merchant site located in UTC, these data types would send a timestamp in the format 2022-11-11T15:40:44.65Z. This timestamp represents November 11, 2022, at 15:40:44.65, with the 'Z' indicating that the time is in UTC.  # noqa: E501

        :return: The document_date_time of this CreditNoteRequest.
        :rtype: datetime
        """
        return self._document_date_time

    @document_date_time.setter
    def document_date_time(self, document_date_time: datetime):
        """Sets the document_date_time of this CreditNoteRequest.

        The date and time at which the credit note was created in Chargebee. For example, if the value is 2022-10-28T15:36:28.129+05:30, then the timestamp represents October 28, 2022, at 15:36:28.129, with an offset of +05:30. This means that the time represented is 5 hours and 30 minutes ahead of UTC/GMT. In the case of a merchant site located in UTC, these data types would send a timestamp in the format 2022-11-11T15:40:44.65Z. This timestamp represents November 11, 2022, at 15:40:44.65, with the 'Z' indicating that the time is in UTC.  # noqa: E501

        :param document_date_time: The document_date_time of this CreditNoteRequest.
        :type document_date_time: datetime
        """
        if document_date_time is None:
            raise ValueError("Invalid value for `document_date_time`, must not be `None`")  # noqa: E501

        self._document_date_time = document_date_time

    @property
    def tax_date_time(self) -> datetime:
        """Gets the tax_date_time of this CreditNoteRequest.

        The date and time at which the tax was applicable in Chargebee. For example, if the value is 2022-10-28T15:36:28.129+05:30, then the timestamp represents October 28, 2022, at 15:36:28.129, with an offset of +05:30. This means that the time represented is 5 hours and 30 minutes ahead of UTC/GMT.In the case of a merchant site located in UTC, these data types would send a timestamp in the format 2022-11-11T15:40:44.65Z. This timestamp represents November 11, 2022, at 15:40:44.65, with the 'Z' indicating that the time is in UTC.  # noqa: E501

        :return: The tax_date_time of this CreditNoteRequest.
        :rtype: datetime
        """
        return self._tax_date_time

    @tax_date_time.setter
    def tax_date_time(self, tax_date_time: datetime):
        """Sets the tax_date_time of this CreditNoteRequest.

        The date and time at which the tax was applicable in Chargebee. For example, if the value is 2022-10-28T15:36:28.129+05:30, then the timestamp represents October 28, 2022, at 15:36:28.129, with an offset of +05:30. This means that the time represented is 5 hours and 30 minutes ahead of UTC/GMT.In the case of a merchant site located in UTC, these data types would send a timestamp in the format 2022-11-11T15:40:44.65Z. This timestamp represents November 11, 2022, at 15:40:44.65, with the 'Z' indicating that the time is in UTC.  # noqa: E501

        :param tax_date_time: The tax_date_time of this CreditNoteRequest.
        :type tax_date_time: datetime
        """

        self._tax_date_time = tax_date_time

    @property
    def currency(self) -> str:
        """Gets the currency of this CreditNoteRequest.

        The [currency](https://en.wikipedia.org/wiki/Currency) in the [ISO-4217 format](https://www.iso.org/iso-4217-currency-codes.html).  # noqa: E501

        :return: The currency of this CreditNoteRequest.
        :rtype: str
        """
        return self._currency

    @currency.setter
    def currency(self, currency: str):
        """Sets the currency of this CreditNoteRequest.

        The [currency](https://en.wikipedia.org/wiki/Currency) in the [ISO-4217 format](https://www.iso.org/iso-4217-currency-codes.html).  # noqa: E501

        :param currency: The currency of this CreditNoteRequest.
        :type currency: str
        """
        if currency is None:
            raise ValueError("Invalid value for `currency`, must not be `None`")  # noqa: E501
        if currency is not None and len(currency) > 3:
            raise ValueError("Invalid value for `currency`, length must be less than or equal to `3`")  # noqa: E501
        if currency is not None and len(currency) < 3:
            raise ValueError("Invalid value for `currency`, length must be greater than or equal to `3`")  # noqa: E501

        self._currency = currency

    @property
    def seller(self) -> Seller:
        """Gets the seller of this CreditNoteRequest.


        :return: The seller of this CreditNoteRequest.
        :rtype: Seller
        """
        return self._seller

    @seller.setter
    def seller(self, seller: Seller):
        """Sets the seller of this CreditNoteRequest.


        :param seller: The seller of this CreditNoteRequest.
        :type seller: Seller
        """
        if seller is None:
            raise ValueError("Invalid value for `seller`, must not be `None`")  # noqa: E501

        self._seller = seller

    @property
    def customer(self) -> Customer:
        """Gets the customer of this CreditNoteRequest.


        :return: The customer of this CreditNoteRequest.
        :rtype: Customer
        """
        return self._customer

    @customer.setter
    def customer(self, customer: Customer):
        """Sets the customer of this CreditNoteRequest.


        :param customer: The customer of this CreditNoteRequest.
        :type customer: Customer
        """
        if customer is None:
            raise ValueError("Invalid value for `customer`, must not be `None`")  # noqa: E501

        self._customer = customer

    @property
    def total(self) -> float:
        """Gets the total of this CreditNoteRequest.

        The total amount of the credit note. `total` can be expressed as `exemptAmount` + `taxableAmount` + `taxAmount`.  # noqa: E501

        :return: The total of this CreditNoteRequest.
        :rtype: float
        """
        return self._total

    @total.setter
    def total(self, total: float):
        """Sets the total of this CreditNoteRequest.

        The total amount of the credit note. `total` can be expressed as `exemptAmount` + `taxableAmount` + `taxAmount`.  # noqa: E501

        :param total: The total of this CreditNoteRequest.
        :type total: float
        """
        if total is None:
            raise ValueError("Invalid value for `total`, must not be `None`")  # noqa: E501

        self._total = total

    @property
    def exempt_amount(self) -> float:
        """Gets the exempt_amount of this CreditNoteRequest.

        The amount exempted from tax.  # noqa: E501

        :return: The exempt_amount of this CreditNoteRequest.
        :rtype: float
        """
        return self._exempt_amount

    @exempt_amount.setter
    def exempt_amount(self, exempt_amount: float):
        """Sets the exempt_amount of this CreditNoteRequest.

        The amount exempted from tax.  # noqa: E501

        :param exempt_amount: The exempt_amount of this CreditNoteRequest.
        :type exempt_amount: float
        """
        if exempt_amount is None:
            raise ValueError("Invalid value for `exempt_amount`, must not be `None`")  # noqa: E501

        self._exempt_amount = exempt_amount

    @property
    def discount_amount(self) -> float:
        """Gets the discount_amount of this CreditNoteRequest.

        The total discount applied. This is the sum of all `lineItems.discount`.  # noqa: E501

        :return: The discount_amount of this CreditNoteRequest.
        :rtype: float
        """
        return self._discount_amount

    @discount_amount.setter
    def discount_amount(self, discount_amount: float):
        """Sets the discount_amount of this CreditNoteRequest.

        The total discount applied. This is the sum of all `lineItems.discount`.  # noqa: E501

        :param discount_amount: The discount_amount of this CreditNoteRequest.
        :type discount_amount: float
        """
        if discount_amount is None:
            raise ValueError("Invalid value for `discount_amount`, must not be `None`")  # noqa: E501

        self._discount_amount = discount_amount

    @property
    def taxable_amount(self) -> float:
        """Gets the taxable_amount of this CreditNoteRequest.

        The amount upon which the tax is calculated.  # noqa: E501

        :return: The taxable_amount of this CreditNoteRequest.
        :rtype: float
        """
        return self._taxable_amount

    @taxable_amount.setter
    def taxable_amount(self, taxable_amount: float):
        """Sets the taxable_amount of this CreditNoteRequest.

        The amount upon which the tax is calculated.  # noqa: E501

        :param taxable_amount: The taxable_amount of this CreditNoteRequest.
        :type taxable_amount: float
        """
        if taxable_amount is None:
            raise ValueError("Invalid value for `taxable_amount`, must not be `None`")  # noqa: E501

        self._taxable_amount = taxable_amount

    @property
    def tax_amount(self) -> float:
        """Gets the tax_amount of this CreditNoteRequest.

        The total tax payable. This is the sum of all `lineItems.taxAmount`.  # noqa: E501

        :return: The tax_amount of this CreditNoteRequest.
        :rtype: float
        """
        return self._tax_amount

    @tax_amount.setter
    def tax_amount(self, tax_amount: float):
        """Sets the tax_amount of this CreditNoteRequest.

        The total tax payable. This is the sum of all `lineItems.taxAmount`.  # noqa: E501

        :param tax_amount: The tax_amount of this CreditNoteRequest.
        :type tax_amount: float
        """
        if tax_amount is None:
            raise ValueError("Invalid value for `tax_amount`, must not be `None`")  # noqa: E501

        self._tax_amount = tax_amount

    @property
    def rounding_amount(self) -> float:
        """Gets the rounding_amount of this CreditNoteRequest.

        The rounding amount added to the total amount to account for fractional correction.  # noqa: E501

        :return: The rounding_amount of this CreditNoteRequest.
        :rtype: float
        """
        return self._rounding_amount

    @rounding_amount.setter
    def rounding_amount(self, rounding_amount: float):
        """Sets the rounding_amount of this CreditNoteRequest.

        The rounding amount added to the total amount to account for fractional correction.  # noqa: E501

        :param rounding_amount: The rounding_amount of this CreditNoteRequest.
        :type rounding_amount: float
        """

        self._rounding_amount = rounding_amount

    @property
    def line_items(self) -> List[InvoiceLineItem]:
        """Gets the line_items of this CreditNoteRequest.


        :return: The line_items of this CreditNoteRequest.
        :rtype: List[InvoiceLineItem]
        """
        return self._line_items

    @line_items.setter
    def line_items(self, line_items: List[InvoiceLineItem]):
        """Sets the line_items of this CreditNoteRequest.


        :param line_items: The line_items of this CreditNoteRequest.
        :type line_items: List[InvoiceLineItem]
        """
        if line_items is not None and len(line_items) > 1250:
            raise ValueError("Invalid value for `line_items`, number of items must be less than or equal to `1250`")  # noqa: E501
        if line_items is not None and len(line_items) < 1:
            raise ValueError("Invalid value for `line_items`, number of items must be greater than or equal to `1`")  # noqa: E501

        self._line_items = line_items
