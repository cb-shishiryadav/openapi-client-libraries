from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model import Model
from openapi_server import util


class BasicErrorResponse(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, message=None, help_url=None):  # noqa: E501
        """BasicErrorResponse - a model defined in OpenAPI

        :param message: The message of this BasicErrorResponse.  # noqa: E501
        :type message: str
        :param help_url: The help_url of this BasicErrorResponse.  # noqa: E501
        :type help_url: str
        """
        self.openapi_types = {
            'message': str,
            'help_url': str
        }

        self.attribute_map = {
            'message': 'message',
            'help_url': 'helpUrl'
        }

        self._message = message
        self._help_url = help_url

    @classmethod
    def from_dict(cls, dikt) -> 'BasicErrorResponse':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The BasicErrorResponse of this BasicErrorResponse.  # noqa: E501
        :rtype: BasicErrorResponse
        """
        return util.deserialize_model(dikt, cls)

    @property
    def message(self) -> str:
        """Gets the message of this BasicErrorResponse.

        The description of the error with details about it's cause.  # noqa: E501

        :return: The message of this BasicErrorResponse.
        :rtype: str
        """
        return self._message

    @message.setter
    def message(self, message: str):
        """Sets the message of this BasicErrorResponse.

        The description of the error with details about it's cause.  # noqa: E501

        :param message: The message of this BasicErrorResponse.
        :type message: str
        """
        if message is None:
            raise ValueError("Invalid value for `message`, must not be `None`")  # noqa: E501
        if message is not None and len(message) > 250:
            raise ValueError("Invalid value for `message`, length must be less than or equal to `250`")  # noqa: E501

        self._message = message

    @property
    def help_url(self) -> str:
        """Gets the help_url of this BasicErrorResponse.

        The link to the documentation for more information about the error and the corrective action.  # noqa: E501

        :return: The help_url of this BasicErrorResponse.
        :rtype: str
        """
        return self._help_url

    @help_url.setter
    def help_url(self, help_url: str):
        """Sets the help_url of this BasicErrorResponse.

        The link to the documentation for more information about the error and the corrective action.  # noqa: E501

        :param help_url: The help_url of this BasicErrorResponse.
        :type help_url: str
        """

        self._help_url = help_url
